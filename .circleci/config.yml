version: 2

workflows:
  version: 2
  build_and_test:
    jobs:
      - build-builder
      - build:
          requires:
            - build-builder

jobs:
  build-builder:
    docker:
      - image: circleci/golang:1-stretch
    working_directory: /go/src/github.com/livepeer/go-livepeer

    environment:
      PKG_CONFIG_PATH: /root/compiled/lib/pkgconfig
      GOPATH: /go
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - checkout
      - setup_remote_docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS

      # First, build the Linux-specific builder container
      - run: docker pull livepeerci/build-platform:latest || echo 'no pre-existing cache found'
      - run: docker build -t livepeerci/build-platform:latest --cache-from=livepeerci/build-platform:latest -f docker/Dockerfile.build-linux .
      - run: docker push livepeerci/build-platform:latest

      # Then, build the actual app in a container shared between Linux and Windows
      - run: docker pull livepeerci/build:latest || echo 'no pre-existing cache found'
      - run: |-
          ./ci_env.sh docker build --build-arg HIGHEST_CHAIN_TAG -t livepeerci/build:latest --cache-from=livepeerci/build:latest -f docker/Dockerfile.build .
      - run: docker push livepeerci/build:latest

      # Finally, build the minimal go-livepeer distributable. We publish two tags for each build:
      # livepeer/go-livepeer:BRANCH_NAME and livepeer/go-livepeer:VERSION_STRING. Both are useful
      # to pull from in different contexts.
      - run: |-
          # Our Docker tag name should be our branch name with just alphanums
          BRANCH_TAG=$(echo $CIRCLE_BRANCH | sed 's/\//-/g' | tr -cd '[:alnum:]_-')
          VERSION_TAG=$(./print_version.sh)
          docker build -t current-build -f docker/Dockerfile.release-linux .
          for TAG in $BRANCH_TAG $VERSION_TAG; do
            docker tag current-build livepeer/go-livepeer:${TAG}-linux
            docker push livepeer/go-livepeer:${TAG}-linux
            # Manifest step is optional in case the Windows build hasn't finished yet
            docker manifest create livepeer/go-livepeer:${TAG} livepeer/go-livepeer:${TAG}-linux livepeer/go-livepeer:${TAG}-windows || true
            docker manifest push livepeer/go-livepeer:${TAG} || true
          done

  build:
    docker:
      # Note race condition - we might get the wrong builder if lots of builds are happening in
      # parallel because this pulls it down from Docker Hub.
      - image: livepeerci/build:latest
    working_directory: /build

    environment:
      PKG_CONFIG_PATH: /root/compiled/lib/pkgconfig
      TEST_RESULTS: /tmp/test-results
      GOPATH: /go

    steps:
      - checkout

      - setup_remote_docker

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Lint
          command: |
            golangci-lint --disable-all --enable=gofmt --enable=vet --enable=golint --deadline=4m run pm verification

      - run:
          name: Run unit tests
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            /bin/bash test.sh 2>&1 | tee $TEST_RESULTS/go-test.out

      - run:
          name: Localdocker build check
          command: make localdocker

      - run:
          name: Upload build
          command: ./upload_build.sh

      - run:
          name: Notify that new build has been uploaded
          command: curl -X POST https://holy-bread-207a.livepeer.workers.dev

      - save_cache:
          key: v3-pkg-cache
          paths:
            - "/go/pkg"
            - "/home/circleci/compiled"
            - "/home/circleci/nasm/nasm"
            - "/home/circleci/x264/x264"
            - "/home/circleci/ffmpeg/libavcodec/libavcodec.a"

      - store_test_results:
          path: /tmp/test-results
