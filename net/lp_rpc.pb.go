// Code generated by protoc-gen-go. DO NOT EDIT.
// source: net/lp_rpc.proto

package net

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OSInfo_StorageType int32

const (
	OSInfo_DIRECT OSInfo_StorageType = 0
	OSInfo_S3     OSInfo_StorageType = 1
	OSInfo_GOOGLE OSInfo_StorageType = 2
)

var OSInfo_StorageType_name = map[int32]string{
	0: "DIRECT",
	1: "S3",
	2: "GOOGLE",
}

var OSInfo_StorageType_value = map[string]int32{
	"DIRECT": 0,
	"S3":     1,
	"GOOGLE": 2,
}

func (x OSInfo_StorageType) String() string {
	return proto.EnumName(OSInfo_StorageType_name, int32(x))
}

func (OSInfo_StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{2, 0}
}

type PingPong struct {
	// Implementation defined
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingPong) Reset()         { *m = PingPong{} }
func (m *PingPong) String() string { return proto.CompactTextString(m) }
func (*PingPong) ProtoMessage()    {}
func (*PingPong) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{0}
}

func (m *PingPong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingPong.Unmarshal(m, b)
}
func (m *PingPong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingPong.Marshal(b, m, deterministic)
}
func (m *PingPong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingPong.Merge(m, src)
}
func (m *PingPong) XXX_Size() int {
	return xxx_messageInfo_PingPong.Size(m)
}
func (m *PingPong) XXX_DiscardUnknown() {
	xxx_messageInfo_PingPong.DiscardUnknown(m)
}

var xxx_messageInfo_PingPong proto.InternalMessageInfo

func (m *PingPong) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// This request is sent by the broadcaster in `GetTranscoder` to request
// information on which transcoder to use.
type OrchestratorRequest struct {
	// Ethereum address of the broadcaster
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Broadcaster's signature over its address
	Sig                  []byte   `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrchestratorRequest) Reset()         { *m = OrchestratorRequest{} }
func (m *OrchestratorRequest) String() string { return proto.CompactTextString(m) }
func (*OrchestratorRequest) ProtoMessage()    {}
func (*OrchestratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{1}
}

func (m *OrchestratorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrchestratorRequest.Unmarshal(m, b)
}
func (m *OrchestratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrchestratorRequest.Marshal(b, m, deterministic)
}
func (m *OrchestratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrchestratorRequest.Merge(m, src)
}
func (m *OrchestratorRequest) XXX_Size() int {
	return xxx_messageInfo_OrchestratorRequest.Size(m)
}
func (m *OrchestratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrchestratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrchestratorRequest proto.InternalMessageInfo

func (m *OrchestratorRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *OrchestratorRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

//
//OSInfo needed to negotiate storages that will be used.
//It carries info needed to write to the storage.
type OSInfo struct {
	// Storage type: direct, s3, ipfs.
	StorageType          OSInfo_StorageType `protobuf:"varint,1,opt,name=storageType,proto3,enum=net.OSInfo_StorageType" json:"storageType,omitempty"`
	S3Info               *S3OSInfo          `protobuf:"bytes,16,opt,name=s3info,proto3" json:"s3info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OSInfo) Reset()         { *m = OSInfo{} }
func (m *OSInfo) String() string { return proto.CompactTextString(m) }
func (*OSInfo) ProtoMessage()    {}
func (*OSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{2}
}

func (m *OSInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OSInfo.Unmarshal(m, b)
}
func (m *OSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OSInfo.Marshal(b, m, deterministic)
}
func (m *OSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSInfo.Merge(m, src)
}
func (m *OSInfo) XXX_Size() int {
	return xxx_messageInfo_OSInfo.Size(m)
}
func (m *OSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OSInfo proto.InternalMessageInfo

func (m *OSInfo) GetStorageType() OSInfo_StorageType {
	if m != nil {
		return m.StorageType
	}
	return OSInfo_DIRECT
}

func (m *OSInfo) GetS3Info() *S3OSInfo {
	if m != nil {
		return m.S3Info
	}
	return nil
}

type S3OSInfo struct {
	// Host to use to connect to S3
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Key (prefix) to use when uploading the object.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// POST policy that S3 owner node creates to give write access to other node.
	Policy string `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	// Signature for POST policy.
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// Needed for POST policy.
	Credential string `protobuf:"bytes,5,opt,name=credential,proto3" json:"credential,omitempty"`
	// Needed for POST policy.
	XAmzDate             string   `protobuf:"bytes,6,opt,name=xAmzDate,proto3" json:"xAmzDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S3OSInfo) Reset()         { *m = S3OSInfo{} }
func (m *S3OSInfo) String() string { return proto.CompactTextString(m) }
func (*S3OSInfo) ProtoMessage()    {}
func (*S3OSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{3}
}

func (m *S3OSInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_S3OSInfo.Unmarshal(m, b)
}
func (m *S3OSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_S3OSInfo.Marshal(b, m, deterministic)
}
func (m *S3OSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3OSInfo.Merge(m, src)
}
func (m *S3OSInfo) XXX_Size() int {
	return xxx_messageInfo_S3OSInfo.Size(m)
}
func (m *S3OSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S3OSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S3OSInfo proto.InternalMessageInfo

func (m *S3OSInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *S3OSInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *S3OSInfo) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *S3OSInfo) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *S3OSInfo) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

func (m *S3OSInfo) GetXAmzDate() string {
	if m != nil {
		return m.XAmzDate
	}
	return ""
}

// PriceInfo conveys pricing info for transcoding services
type PriceInfo struct {
	// price in wei
	PricePerUnit int64 `protobuf:"varint,1,opt,name=pricePerUnit,proto3" json:"pricePerUnit,omitempty"`
	// Pixels covered in the price
	// Set price to 1 wei and pixelsPerUnit > 1 to have a smaller price granularity per pixel than 1 wei
	PixelsPerUnit        int64    `protobuf:"varint,2,opt,name=pixelsPerUnit,proto3" json:"pixelsPerUnit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceInfo) Reset()         { *m = PriceInfo{} }
func (m *PriceInfo) String() string { return proto.CompactTextString(m) }
func (*PriceInfo) ProtoMessage()    {}
func (*PriceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{4}
}

func (m *PriceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceInfo.Unmarshal(m, b)
}
func (m *PriceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceInfo.Marshal(b, m, deterministic)
}
func (m *PriceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceInfo.Merge(m, src)
}
func (m *PriceInfo) XXX_Size() int {
	return xxx_messageInfo_PriceInfo.Size(m)
}
func (m *PriceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PriceInfo proto.InternalMessageInfo

func (m *PriceInfo) GetPricePerUnit() int64 {
	if m != nil {
		return m.PricePerUnit
	}
	return 0
}

func (m *PriceInfo) GetPixelsPerUnit() int64 {
	if m != nil {
		return m.PixelsPerUnit
	}
	return 0
}

// The orchestrator sends this in response to `GetOrchestrator`, containing
// miscellaneous data related to the job.
type OrchestratorInfo struct {
	// URI of the transcoder to use for submitting segments.
	Transcoder string `protobuf:"bytes,1,opt,name=transcoder,proto3" json:"transcoder,omitempty"`
	// Parameters for probabilistic micropayment tickets
	TicketParams *TicketParams `protobuf:"bytes,2,opt,name=ticket_params,json=ticketParams,proto3" json:"ticket_params,omitempty"`
	// Price Info containing the price per pixel to transcode
	PriceInfo *PriceInfo `protobuf:"bytes,3,opt,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`
	// Orchestrator returns info about own input object storage, if it wants it to be used.
	Storage              []*OSInfo `protobuf:"bytes,32,rep,name=storage,proto3" json:"storage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OrchestratorInfo) Reset()         { *m = OrchestratorInfo{} }
func (m *OrchestratorInfo) String() string { return proto.CompactTextString(m) }
func (*OrchestratorInfo) ProtoMessage()    {}
func (*OrchestratorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{5}
}

func (m *OrchestratorInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrchestratorInfo.Unmarshal(m, b)
}
func (m *OrchestratorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrchestratorInfo.Marshal(b, m, deterministic)
}
func (m *OrchestratorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrchestratorInfo.Merge(m, src)
}
func (m *OrchestratorInfo) XXX_Size() int {
	return xxx_messageInfo_OrchestratorInfo.Size(m)
}
func (m *OrchestratorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrchestratorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrchestratorInfo proto.InternalMessageInfo

func (m *OrchestratorInfo) GetTranscoder() string {
	if m != nil {
		return m.Transcoder
	}
	return ""
}

func (m *OrchestratorInfo) GetTicketParams() *TicketParams {
	if m != nil {
		return m.TicketParams
	}
	return nil
}

func (m *OrchestratorInfo) GetPriceInfo() *PriceInfo {
	if m != nil {
		return m.PriceInfo
	}
	return nil
}

func (m *OrchestratorInfo) GetStorage() []*OSInfo {
	if m != nil {
		return m.Storage
	}
	return nil
}

// Data included by the broadcaster when submitting a segment for transcoding.
type SegData struct {
	// Manifest ID this segment belongs to
	ManifestId []byte `protobuf:"bytes,1,opt,name=manifestId,proto3" json:"manifestId,omitempty"`
	// Sequence number of the segment to be transcoded
	Seq int64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// Hash of the segment data to be transcoded
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Transcoding profiles to use
	Profiles []byte `protobuf:"bytes,4,opt,name=profiles,proto3" json:"profiles,omitempty"`
	// Broadcaster signature for the segment. Corresponds to:
	// broadcaster.sign(manifestId | seqNo | dataHash | profiles)
	Sig []byte `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	// Broadcaster's preferred storage medium(s)
	// XXX should we include this in a sig somewhere until certs are authenticated?
	Storage []*OSInfo `protobuf:"bytes,32,rep,name=storage,proto3" json:"storage,omitempty"`
	// Transcoding profiles to use. Supersedes `profiles` field
	FullProfiles         []*VideoProfile `protobuf:"bytes,33,rep,name=fullProfiles,proto3" json:"fullProfiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SegData) Reset()         { *m = SegData{} }
func (m *SegData) String() string { return proto.CompactTextString(m) }
func (*SegData) ProtoMessage()    {}
func (*SegData) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{6}
}

func (m *SegData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegData.Unmarshal(m, b)
}
func (m *SegData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegData.Marshal(b, m, deterministic)
}
func (m *SegData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegData.Merge(m, src)
}
func (m *SegData) XXX_Size() int {
	return xxx_messageInfo_SegData.Size(m)
}
func (m *SegData) XXX_DiscardUnknown() {
	xxx_messageInfo_SegData.DiscardUnknown(m)
}

var xxx_messageInfo_SegData proto.InternalMessageInfo

func (m *SegData) GetManifestId() []byte {
	if m != nil {
		return m.ManifestId
	}
	return nil
}

func (m *SegData) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SegData) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *SegData) GetProfiles() []byte {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *SegData) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *SegData) GetStorage() []*OSInfo {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *SegData) GetFullProfiles() []*VideoProfile {
	if m != nil {
		return m.FullProfiles
	}
	return nil
}

type VideoProfile struct {
	// Name of VideoProfile
	Name string `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	// Width of VideoProfile
	Width int32 `protobuf:"varint,17,opt,name=width,proto3" json:"width,omitempty"`
	// Height of VideoProfile
	Height int32 `protobuf:"varint,18,opt,name=height,proto3" json:"height,omitempty"`
	// Bitrate of VideoProfile
	Bitrate int32 `protobuf:"varint,19,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// FPS of VideoProfile
	Fps                  uint32   `protobuf:"varint,20,opt,name=fps,proto3" json:"fps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoProfile) Reset()         { *m = VideoProfile{} }
func (m *VideoProfile) String() string { return proto.CompactTextString(m) }
func (*VideoProfile) ProtoMessage()    {}
func (*VideoProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{7}
}

func (m *VideoProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoProfile.Unmarshal(m, b)
}
func (m *VideoProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoProfile.Marshal(b, m, deterministic)
}
func (m *VideoProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoProfile.Merge(m, src)
}
func (m *VideoProfile) XXX_Size() int {
	return xxx_messageInfo_VideoProfile.Size(m)
}
func (m *VideoProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoProfile.DiscardUnknown(m)
}

var xxx_messageInfo_VideoProfile proto.InternalMessageInfo

func (m *VideoProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VideoProfile) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *VideoProfile) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VideoProfile) GetBitrate() int32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *VideoProfile) GetFps() uint32 {
	if m != nil {
		return m.Fps
	}
	return 0
}

// Individual transcoded segment data.
type TranscodedSegmentData struct {
	// URL where the transcoded data can be downloaded from.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Amount of pixels processed (output pixels)
	Pixels               int64    `protobuf:"varint,2,opt,name=pixels,proto3" json:"pixels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TranscodedSegmentData) Reset()         { *m = TranscodedSegmentData{} }
func (m *TranscodedSegmentData) String() string { return proto.CompactTextString(m) }
func (*TranscodedSegmentData) ProtoMessage()    {}
func (*TranscodedSegmentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{8}
}

func (m *TranscodedSegmentData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranscodedSegmentData.Unmarshal(m, b)
}
func (m *TranscodedSegmentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranscodedSegmentData.Marshal(b, m, deterministic)
}
func (m *TranscodedSegmentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscodedSegmentData.Merge(m, src)
}
func (m *TranscodedSegmentData) XXX_Size() int {
	return xxx_messageInfo_TranscodedSegmentData.Size(m)
}
func (m *TranscodedSegmentData) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscodedSegmentData.DiscardUnknown(m)
}

var xxx_messageInfo_TranscodedSegmentData proto.InternalMessageInfo

func (m *TranscodedSegmentData) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TranscodedSegmentData) GetPixels() int64 {
	if m != nil {
		return m.Pixels
	}
	return 0
}

// A set of transcoded segments following the profiles specified in the job.
type TranscodeData struct {
	// Transcoded data, in the order specified in the job options
	Segments []*TranscodedSegmentData `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	// Signature of the hash of the concatenated hashes
	Sig                  []byte   `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TranscodeData) Reset()         { *m = TranscodeData{} }
func (m *TranscodeData) String() string { return proto.CompactTextString(m) }
func (*TranscodeData) ProtoMessage()    {}
func (*TranscodeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{9}
}

func (m *TranscodeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranscodeData.Unmarshal(m, b)
}
func (m *TranscodeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranscodeData.Marshal(b, m, deterministic)
}
func (m *TranscodeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscodeData.Merge(m, src)
}
func (m *TranscodeData) XXX_Size() int {
	return xxx_messageInfo_TranscodeData.Size(m)
}
func (m *TranscodeData) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscodeData.DiscardUnknown(m)
}

var xxx_messageInfo_TranscodeData proto.InternalMessageInfo

func (m *TranscodeData) GetSegments() []*TranscodedSegmentData {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *TranscodeData) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

// Response that a transcoder sends after transcoding a segment.
type TranscodeResult struct {
	// Sequence number of the transcoded results.
	Seq int64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Result of transcoding can be an error, or successful with more info
	//
	// Types that are valid to be assigned to Result:
	//	*TranscodeResult_Error
	//	*TranscodeResult_Data
	Result isTranscodeResult_Result `protobuf_oneof:"result"`
	// Used to notify a broadcaster of updated orchestrator information
	Info                 *OrchestratorInfo `protobuf:"bytes,16,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TranscodeResult) Reset()         { *m = TranscodeResult{} }
func (m *TranscodeResult) String() string { return proto.CompactTextString(m) }
func (*TranscodeResult) ProtoMessage()    {}
func (*TranscodeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{10}
}

func (m *TranscodeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranscodeResult.Unmarshal(m, b)
}
func (m *TranscodeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranscodeResult.Marshal(b, m, deterministic)
}
func (m *TranscodeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscodeResult.Merge(m, src)
}
func (m *TranscodeResult) XXX_Size() int {
	return xxx_messageInfo_TranscodeResult.Size(m)
}
func (m *TranscodeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscodeResult.DiscardUnknown(m)
}

var xxx_messageInfo_TranscodeResult proto.InternalMessageInfo

func (m *TranscodeResult) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type isTranscodeResult_Result interface {
	isTranscodeResult_Result()
}

type TranscodeResult_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type TranscodeResult_Data struct {
	Data *TranscodeData `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

func (*TranscodeResult_Error) isTranscodeResult_Result() {}

func (*TranscodeResult_Data) isTranscodeResult_Result() {}

func (m *TranscodeResult) GetResult() isTranscodeResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TranscodeResult) GetError() string {
	if x, ok := m.GetResult().(*TranscodeResult_Error); ok {
		return x.Error
	}
	return ""
}

func (m *TranscodeResult) GetData() *TranscodeData {
	if x, ok := m.GetResult().(*TranscodeResult_Data); ok {
		return x.Data
	}
	return nil
}

func (m *TranscodeResult) GetInfo() *OrchestratorInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TranscodeResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TranscodeResult_Error)(nil),
		(*TranscodeResult_Data)(nil),
	}
}

// Sent by the transcoder to register itself to the orchestrator.
type RegisterRequest struct {
	// Shared secret for auth
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	// Transcoder capacity
	Capacity             int64    `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{11}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *RegisterRequest) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

// Sent by the orchestrator to the transcoder
type NotifySegment struct {
	// URL of the segment to transcode.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Job the segment belongs to.
	Job string `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	// ID for this particular transcoding task.
	TaskId int64 `protobuf:"varint,16,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// Set of profiles to transcode this segment into.
	Profiles []byte `protobuf:"bytes,17,opt,name=profiles,proto3" json:"profiles,omitempty"`
	// Transcoding profiles to use. Supersedes `profiles` field
	FullProfiles         []*VideoProfile `protobuf:"bytes,33,rep,name=fullProfiles,proto3" json:"fullProfiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifySegment) Reset()         { *m = NotifySegment{} }
func (m *NotifySegment) String() string { return proto.CompactTextString(m) }
func (*NotifySegment) ProtoMessage()    {}
func (*NotifySegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{12}
}

func (m *NotifySegment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifySegment.Unmarshal(m, b)
}
func (m *NotifySegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifySegment.Marshal(b, m, deterministic)
}
func (m *NotifySegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySegment.Merge(m, src)
}
func (m *NotifySegment) XXX_Size() int {
	return xxx_messageInfo_NotifySegment.Size(m)
}
func (m *NotifySegment) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySegment.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySegment proto.InternalMessageInfo

func (m *NotifySegment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NotifySegment) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

func (m *NotifySegment) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *NotifySegment) GetProfiles() []byte {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *NotifySegment) GetFullProfiles() []*VideoProfile {
	if m != nil {
		return m.FullProfiles
	}
	return nil
}

// Required parameters for probabilistic micropayment tickets
type TicketParams struct {
	// ETH address of the recipient
	Recipient []byte `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Pay out (in Wei) to the recipient if the ticket wins
	FaceValue []byte `protobuf:"bytes,2,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	// Probability that the ticket wins
	WinProb []byte `protobuf:"bytes,3,opt,name=win_prob,json=winProb,proto3" json:"win_prob,omitempty"`
	// 32 byte keccak-256 hash commitment to a random number provided
	// by the recipient
	RecipientRandHash []byte `protobuf:"bytes,4,opt,name=recipient_rand_hash,json=recipientRandHash,proto3" json:"recipient_rand_hash,omitempty"`
	// Value generated by recipient that the recipient can use
	// to derive the random number corresponding to the recipient's hash commitment
	Seed                 []byte   `protobuf:"bytes,5,opt,name=seed,proto3" json:"seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TicketParams) Reset()         { *m = TicketParams{} }
func (m *TicketParams) String() string { return proto.CompactTextString(m) }
func (*TicketParams) ProtoMessage()    {}
func (*TicketParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{13}
}

func (m *TicketParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketParams.Unmarshal(m, b)
}
func (m *TicketParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketParams.Marshal(b, m, deterministic)
}
func (m *TicketParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketParams.Merge(m, src)
}
func (m *TicketParams) XXX_Size() int {
	return xxx_messageInfo_TicketParams.Size(m)
}
func (m *TicketParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketParams.DiscardUnknown(m)
}

var xxx_messageInfo_TicketParams proto.InternalMessageInfo

func (m *TicketParams) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *TicketParams) GetFaceValue() []byte {
	if m != nil {
		return m.FaceValue
	}
	return nil
}

func (m *TicketParams) GetWinProb() []byte {
	if m != nil {
		return m.WinProb
	}
	return nil
}

func (m *TicketParams) GetRecipientRandHash() []byte {
	if m != nil {
		return m.RecipientRandHash
	}
	return nil
}

func (m *TicketParams) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

// Sender Params (nonces and signatures)
type TicketSenderParams struct {
	// Monotonically increasing counter that makes the ticket
	// unique relative to a particular hash commitment to a recipient's random number
	SenderNonce uint32 `protobuf:"varint,1,opt,name=sender_nonce,json=senderNonce,proto3" json:"sender_nonce,omitempty"`
	// Sender signature over the ticket
	Sig                  []byte   `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TicketSenderParams) Reset()         { *m = TicketSenderParams{} }
func (m *TicketSenderParams) String() string { return proto.CompactTextString(m) }
func (*TicketSenderParams) ProtoMessage()    {}
func (*TicketSenderParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{14}
}

func (m *TicketSenderParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketSenderParams.Unmarshal(m, b)
}
func (m *TicketSenderParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketSenderParams.Marshal(b, m, deterministic)
}
func (m *TicketSenderParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketSenderParams.Merge(m, src)
}
func (m *TicketSenderParams) XXX_Size() int {
	return xxx_messageInfo_TicketSenderParams.Size(m)
}
func (m *TicketSenderParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketSenderParams.DiscardUnknown(m)
}

var xxx_messageInfo_TicketSenderParams proto.InternalMessageInfo

func (m *TicketSenderParams) GetSenderNonce() uint32 {
	if m != nil {
		return m.SenderNonce
	}
	return 0
}

func (m *TicketSenderParams) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

// Ticket params for expiration related validation
type TicketExpirationParams struct {
	// Round during which tickets are created
	CreationRound int64 `protobuf:"varint,1,opt,name=creation_round,json=creationRound,proto3" json:"creation_round,omitempty"`
	// Block hash associated with creation_round
	CreationRoundBlockHash []byte   `protobuf:"bytes,2,opt,name=creation_round_block_hash,json=creationRoundBlockHash,proto3" json:"creation_round_block_hash,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *TicketExpirationParams) Reset()         { *m = TicketExpirationParams{} }
func (m *TicketExpirationParams) String() string { return proto.CompactTextString(m) }
func (*TicketExpirationParams) ProtoMessage()    {}
func (*TicketExpirationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{15}
}

func (m *TicketExpirationParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketExpirationParams.Unmarshal(m, b)
}
func (m *TicketExpirationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketExpirationParams.Marshal(b, m, deterministic)
}
func (m *TicketExpirationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketExpirationParams.Merge(m, src)
}
func (m *TicketExpirationParams) XXX_Size() int {
	return xxx_messageInfo_TicketExpirationParams.Size(m)
}
func (m *TicketExpirationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketExpirationParams.DiscardUnknown(m)
}

var xxx_messageInfo_TicketExpirationParams proto.InternalMessageInfo

func (m *TicketExpirationParams) GetCreationRound() int64 {
	if m != nil {
		return m.CreationRound
	}
	return 0
}

func (m *TicketExpirationParams) GetCreationRoundBlockHash() []byte {
	if m != nil {
		return m.CreationRoundBlockHash
	}
	return nil
}

// Payment for transcoding video segments
// A payment can constitute of multiple tickets
// A broadcaster might need to send multiple tickets to top up his credit with an Orchestrator
type Payment struct {
	// Probabilistic micropayment ticket parameters
	// These remain the same even when sending multiple tickets
	TicketParams *TicketParams `protobuf:"bytes,1,opt,name=ticket_params,json=ticketParams,proto3" json:"ticket_params,omitempty"`
	// ETH address of the sender
	Sender []byte `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Ticket params for expiration related validation
	ExpirationParams   *TicketExpirationParams `protobuf:"bytes,3,opt,name=expiration_params,json=expirationParams,proto3" json:"expiration_params,omitempty"`
	TicketSenderParams []*TicketSenderParams   `protobuf:"bytes,4,rep,name=ticket_sender_params,json=ticketSenderParams,proto3" json:"ticket_sender_params,omitempty"`
	// O's last known price
	ExpectedPrice        *PriceInfo `protobuf:"bytes,5,opt,name=expected_price,json=expectedPrice,proto3" json:"expected_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_034e29c79f9ba827, []int{16}
}

func (m *Payment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payment.Unmarshal(m, b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return xxx_messageInfo_Payment.Size(m)
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetTicketParams() *TicketParams {
	if m != nil {
		return m.TicketParams
	}
	return nil
}

func (m *Payment) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Payment) GetExpirationParams() *TicketExpirationParams {
	if m != nil {
		return m.ExpirationParams
	}
	return nil
}

func (m *Payment) GetTicketSenderParams() []*TicketSenderParams {
	if m != nil {
		return m.TicketSenderParams
	}
	return nil
}

func (m *Payment) GetExpectedPrice() *PriceInfo {
	if m != nil {
		return m.ExpectedPrice
	}
	return nil
}

func init() {
	proto.RegisterEnum("net.OSInfo_StorageType", OSInfo_StorageType_name, OSInfo_StorageType_value)
	proto.RegisterType((*PingPong)(nil), "net.PingPong")
	proto.RegisterType((*OrchestratorRequest)(nil), "net.OrchestratorRequest")
	proto.RegisterType((*OSInfo)(nil), "net.OSInfo")
	proto.RegisterType((*S3OSInfo)(nil), "net.S3OSInfo")
	proto.RegisterType((*PriceInfo)(nil), "net.PriceInfo")
	proto.RegisterType((*OrchestratorInfo)(nil), "net.OrchestratorInfo")
	proto.RegisterType((*SegData)(nil), "net.SegData")
	proto.RegisterType((*VideoProfile)(nil), "net.VideoProfile")
	proto.RegisterType((*TranscodedSegmentData)(nil), "net.TranscodedSegmentData")
	proto.RegisterType((*TranscodeData)(nil), "net.TranscodeData")
	proto.RegisterType((*TranscodeResult)(nil), "net.TranscodeResult")
	proto.RegisterType((*RegisterRequest)(nil), "net.RegisterRequest")
	proto.RegisterType((*NotifySegment)(nil), "net.NotifySegment")
	proto.RegisterType((*TicketParams)(nil), "net.TicketParams")
	proto.RegisterType((*TicketSenderParams)(nil), "net.TicketSenderParams")
	proto.RegisterType((*TicketExpirationParams)(nil), "net.TicketExpirationParams")
	proto.RegisterType((*Payment)(nil), "net.Payment")
}

func init() { proto.RegisterFile("net/lp_rpc.proto", fileDescriptor_034e29c79f9ba827) }

var fileDescriptor_034e29c79f9ba827 = []byte{
	// 1122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x0e, 0x2d, 0x59, 0xb6, 0x46, 0x92, 0x23, 0x6f, 0x1c, 0x87, 0x71, 0xdb, 0x40, 0x21, 0x12,
	0xc0, 0x3d, 0xc4, 0x2d, 0x6c, 0x24, 0x40, 0x6e, 0x4d, 0x1a, 0x23, 0x36, 0x50, 0xc4, 0xc2, 0xca,
	0x09, 0xd0, 0x93, 0xb0, 0x22, 0x47, 0xd2, 0xc6, 0xf2, 0x92, 0x59, 0xae, 0x6a, 0x2b, 0xe8, 0x8b,
	0xb4, 0x87, 0x1e, 0x0a, 0xf4, 0xd2, 0xa7, 0xe8, 0x7b, 0xf4, 0x65, 0x8a, 0x9d, 0x5d, 0xd2, 0x94,
	0xed, 0x43, 0xd0, 0xdb, 0xce, 0x37, 0xb3, 0xb3, 0xf3, 0xf7, 0x0d, 0x09, 0x5d, 0x85, 0xe6, 0xbb,
	0x59, 0x36, 0xd4, 0x59, 0xbc, 0x97, 0xe9, 0xd4, 0xa4, 0xac, 0xa6, 0xd0, 0x44, 0x3d, 0x58, 0xef,
	0x4b, 0x35, 0xe9, 0xa7, 0x6a, 0xc2, 0xb6, 0x60, 0xf5, 0x17, 0x31, 0x9b, 0x63, 0x18, 0xf4, 0x82,
	0xdd, 0x36, 0x77, 0x42, 0xf4, 0x0a, 0xee, 0x9d, 0xe8, 0x78, 0x8a, 0xb9, 0xd1, 0xc2, 0xa4, 0x9a,
	0xe3, 0xa7, 0x39, 0xe6, 0x86, 0x85, 0xb0, 0x26, 0x92, 0x44, 0x63, 0x9e, 0x7b, 0xf3, 0x42, 0x64,
	0x5d, 0xa8, 0xe5, 0x72, 0x12, 0xae, 0x10, 0x6a, 0x8f, 0xd1, 0x6f, 0x01, 0x34, 0x4e, 0x06, 0xc7,
	0x6a, 0x9c, 0xb2, 0x97, 0xd0, 0xca, 0x4d, 0xaa, 0xc5, 0x04, 0x4f, 0x17, 0x99, 0x7b, 0x69, 0x63,
	0xff, 0xc1, 0x9e, 0x42, 0xb3, 0xe7, 0x2c, 0xf6, 0x06, 0x57, 0x6a, 0x5e, 0xb5, 0x65, 0x4f, 0xa1,
	0x91, 0x1f, 0x48, 0x35, 0x4e, 0xc3, 0x6e, 0x2f, 0xd8, 0x6d, 0xed, 0x77, 0xe8, 0xd6, 0xe0, 0xc0,
	0xdd, 0xe3, 0x5e, 0x19, 0x3d, 0x83, 0x56, 0xc5, 0x05, 0x03, 0x68, 0xbc, 0x39, 0xe6, 0x87, 0x3f,
	0x9e, 0x76, 0xef, 0xb0, 0x06, 0xac, 0x0c, 0x0e, 0xba, 0x81, 0xc5, 0xde, 0x9e, 0x9c, 0xbc, 0xfd,
	0xe9, 0xb0, 0xbb, 0x12, 0xfd, 0x19, 0xc0, 0x7a, 0xe1, 0x83, 0x31, 0xa8, 0x4f, 0xd3, 0xdc, 0x50,
	0x58, 0x4d, 0x4e, 0x67, 0x9b, 0xce, 0x19, 0x2e, 0x28, 0x9d, 0x26, 0xb7, 0x47, 0xb6, 0x0d, 0x8d,
	0x2c, 0x9d, 0xc9, 0x78, 0x11, 0xd6, 0x08, 0xf4, 0x12, 0xfb, 0x1a, 0x9a, 0xb9, 0x9c, 0x28, 0x61,
	0xe6, 0x1a, 0xc3, 0x3a, 0xa9, 0xae, 0x00, 0xf6, 0x08, 0x20, 0xd6, 0x98, 0xa0, 0x32, 0x52, 0xcc,
	0xc2, 0x55, 0x52, 0x57, 0x10, 0xb6, 0x03, 0xeb, 0x97, 0xaf, 0xce, 0x3f, 0xbf, 0x11, 0x06, 0xc3,
	0x06, 0x69, 0x4b, 0x39, 0x7a, 0x0f, 0xcd, 0xbe, 0x96, 0x31, 0x52, 0x90, 0x11, 0xb4, 0x33, 0x2b,
	0xf4, 0x51, 0xbf, 0x57, 0xd2, 0x05, 0x5b, 0xe3, 0x4b, 0x18, 0x7b, 0x02, 0x9d, 0x4c, 0x5e, 0xe2,
	0x2c, 0x2f, 0x8c, 0x56, 0xc8, 0x68, 0x19, 0x8c, 0xfe, 0x09, 0xa0, 0x5b, 0xed, 0x2d, 0xb9, 0x7f,
	0x04, 0x60, 0xb4, 0x50, 0x79, 0x9c, 0x26, 0xa8, 0x7d, 0x25, 0x2a, 0x08, 0x7b, 0x01, 0x1d, 0x23,
	0xe3, 0x33, 0x34, 0xc3, 0x4c, 0x68, 0x71, 0x9e, 0x93, 0xeb, 0xd6, 0xfe, 0x26, 0x75, 0xe3, 0x94,
	0x34, 0x7d, 0x52, 0xf0, 0xb6, 0xa9, 0x48, 0xec, 0x19, 0x00, 0x85, 0x38, 0xa4, 0x16, 0xd6, 0xe8,
	0xd2, 0x06, 0x5d, 0x2a, 0x53, 0xe3, 0xcd, 0xac, 0xcc, 0xf2, 0x29, 0xac, 0xf9, 0xe6, 0x87, 0xbd,
	0x5e, 0x6d, 0xb7, 0xb5, 0xdf, 0xaa, 0x0c, 0x09, 0x2f, 0x74, 0xd1, 0xbf, 0x01, 0xac, 0x0d, 0x70,
	0xf2, 0x46, 0x18, 0x61, 0x23, 0x3f, 0x17, 0x4a, 0x8e, 0x31, 0x37, 0xc7, 0x89, 0x9f, 0xca, 0x0a,
	0x42, 0x83, 0x89, 0x9f, 0x7c, 0x29, 0xec, 0x91, 0xfa, 0x2d, 0xf2, 0x29, 0x45, 0xd3, 0xe6, 0x74,
	0xb6, 0x7d, 0xc8, 0x74, 0x3a, 0x96, 0x33, 0xcc, 0xa9, 0x89, 0x6d, 0x5e, 0xca, 0xc5, 0x68, 0xaf,
	0x96, 0xa3, 0xfd, 0x85, 0x61, 0xb2, 0xe7, 0xd0, 0x1e, 0xcf, 0x67, 0xb3, 0x7e, 0xe1, 0xf8, 0x31,
	0xd9, 0xba, 0x9a, 0x7d, 0x90, 0x09, 0xa6, 0x5e, 0xc3, 0x97, 0xcc, 0xa2, 0x5f, 0xa1, 0x5d, 0xd5,
	0xda, 0x78, 0x95, 0x38, 0x47, 0x22, 0x40, 0x93, 0xd3, 0xd9, 0xb2, 0xf6, 0x42, 0x26, 0x66, 0x1a,
	0x6e, 0xf6, 0x82, 0xdd, 0x55, 0xee, 0x04, 0x3b, 0xa3, 0x53, 0x94, 0x93, 0xa9, 0x09, 0x19, 0xc1,
	0x5e, 0xb2, 0xb4, 0x1d, 0x49, 0xdb, 0x6d, 0x0c, 0xef, 0x91, 0xa2, 0x10, 0x6d, 0x6e, 0xe3, 0x2c,
	0x0f, 0xb7, 0x7a, 0xc1, 0x6e, 0x87, 0xdb, 0x63, 0xf4, 0x0a, 0xee, 0x9f, 0x16, 0x7d, 0x4f, 0x06,
	0x38, 0x39, 0x47, 0x65, 0xa8, 0xd0, 0x5d, 0xa8, 0xcd, 0xf5, 0xcc, 0xcf, 0x86, 0x3d, 0x12, 0x25,
	0x68, 0xb4, 0x7c, 0x75, 0xbd, 0x14, 0xfd, 0x0c, 0x9d, 0xd2, 0x05, 0x5d, 0x7d, 0x01, 0xeb, 0xb9,
	0xf3, 0x64, 0xf7, 0x86, 0x2d, 0xc2, 0x8e, 0x1b, 0x9c, 0xdb, 0x1e, 0xe2, 0xa5, 0xed, 0x2d, 0x4b,
	0xe5, 0xf7, 0x00, 0xee, 0x96, 0xb7, 0x38, 0xe6, 0xf3, 0x99, 0x29, 0x3a, 0x1c, 0x5c, 0x75, 0x78,
	0x1b, 0x56, 0x51, 0xeb, 0x54, 0x3b, 0xfe, 0x1e, 0xdd, 0xe1, 0x4e, 0x64, 0xbb, 0x50, 0x4f, 0x84,
	0x11, 0x7e, 0x0e, 0xd9, 0x72, 0x0c, 0xf6, 0xed, 0xa3, 0x3b, 0x9c, 0x2c, 0xd8, 0xb7, 0x50, 0xaf,
	0x2c, 0x9d, 0xfb, 0xae, 0xbd, 0xd7, 0x48, 0xc3, 0xc9, 0xe4, 0xf5, 0x3a, 0x34, 0x34, 0x05, 0x12,
	0x1d, 0xc2, 0x5d, 0x8e, 0x13, 0x99, 0x1b, 0x2c, 0x17, 0xe6, 0x36, 0x34, 0x72, 0x8c, 0x35, 0x16,
	0xdb, 0xc5, 0x4b, 0x76, 0xde, 0x62, 0x91, 0x89, 0x58, 0x9a, 0x85, 0x2f, 0x5e, 0x29, 0x47, 0x7f,
	0x04, 0xd0, 0x79, 0x97, 0x1a, 0x39, 0x5e, 0xf8, 0xaa, 0xdc, 0x52, 0xfa, 0x2e, 0xd4, 0x3e, 0xa6,
	0xa3, 0x62, 0x3f, 0x7d, 0x4c, 0x47, 0xf6, 0x25, 0x23, 0xf2, 0xb3, 0xe3, 0x84, 0x62, 0xae, 0x71,
	0x2f, 0x2d, 0x4d, 0xf6, 0xe6, 0xb5, 0xc9, 0xfe, 0x9f, 0x03, 0xfa, 0x77, 0x00, 0xed, 0x2a, 0xe7,
	0xed, 0x0e, 0xd4, 0x18, 0xcb, 0x4c, 0xa2, 0x32, 0x9e, 0x82, 0x57, 0x00, 0xfb, 0x06, 0x60, 0x2c,
	0x62, 0x1c, 0xba, 0xcf, 0x8c, 0x6b, 0x66, 0xd3, 0x22, 0x1f, 0x2c, 0xc0, 0x1e, 0xc2, 0xfa, 0x85,
	0x54, 0xc3, 0x4c, 0xa7, 0x23, 0x4f, 0xc9, 0xb5, 0x0b, 0xa9, 0xfa, 0x3a, 0x1d, 0xb1, 0x3d, 0xb8,
	0x57, 0xba, 0x19, 0x6a, 0xa1, 0x92, 0x21, 0x11, 0xd7, 0x11, 0x74, 0xb3, 0x54, 0x71, 0xa1, 0x92,
	0x23, 0xcb, 0x62, 0x06, 0xf5, 0x1c, 0x31, 0xf1, 0x54, 0xa5, 0x73, 0x74, 0x0c, 0xcc, 0xc5, 0x3a,
	0x40, 0x95, 0xa0, 0xf6, 0x11, 0x3f, 0x86, 0x76, 0x4e, 0xf2, 0x50, 0xa5, 0x2a, 0x76, 0x9f, 0xa4,
	0x0e, 0x6f, 0x39, 0xec, 0x9d, 0x85, 0x6e, 0x19, 0xbe, 0xcf, 0xb0, 0xed, 0x5c, 0x1d, 0x5e, 0x66,
	0x52, 0x0b, 0x23, 0x53, 0xe5, 0xdd, 0x3d, 0x85, 0x8d, 0x58, 0x23, 0x21, 0x43, 0x9d, 0xce, 0x55,
	0xe2, 0xa7, 0xb1, 0x53, 0xa0, 0xdc, 0x82, 0xec, 0x25, 0x3c, 0x5c, 0x36, 0x1b, 0x8e, 0x66, 0x69,
	0x7c, 0xe6, 0xb2, 0x72, 0x0f, 0x6d, 0x2f, 0xdd, 0x78, 0x6d, 0xd5, 0x36, 0xb5, 0xe8, 0xaf, 0x15,
	0x58, 0xeb, 0x8b, 0x05, 0x8d, 0xc3, 0x8d, 0x65, 0x1c, 0x7c, 0xd9, 0x32, 0xa6, 0x61, 0xb4, 0x09,
	0xfa, 0xb7, 0xbc, 0xc4, 0x8e, 0x60, 0x13, 0xcb, 0x8c, 0x0a, 0x9f, 0x8e, 0x23, 0x5f, 0x55, 0x7c,
	0x5e, 0xcf, 0x9a, 0x77, 0xf1, 0x7a, 0x1d, 0x8e, 0x61, 0xcb, 0x47, 0xe6, 0xab, 0xeb, 0x9d, 0xd5,
	0x69, 0xb0, 0x1e, 0x54, 0x9c, 0x55, 0xbb, 0xc1, 0x99, 0xb9, 0xd9, 0xa1, 0xe7, 0xb0, 0x81, 0x97,
	0x19, 0xc6, 0x06, 0x93, 0x21, 0x7d, 0x20, 0xa8, 0xab, 0x37, 0xbf, 0x1e, 0x9d, 0xc2, 0x8a, 0xa0,
	0xfd, 0x4b, 0x68, 0x57, 0x79, 0xca, 0x5e, 0xc3, 0xdd, 0xb7, 0x68, 0x96, 0xa0, 0xf0, 0x06, 0x9b,
	0x3d, 0x5b, 0x77, 0x6e, 0xe7, 0x39, 0x7b, 0x02, 0x75, 0xfb, 0xbb, 0xc4, 0xdc, 0xbf, 0x47, 0xf1,
	0xe7, 0xb4, 0xb3, 0x2c, 0xee, 0xbf, 0x03, 0x38, 0xbd, 0xfa, 0x60, 0xfe, 0x00, 0xac, 0xd8, 0x05,
	0x15, 0x74, 0x8b, 0xae, 0x5c, 0x5b, 0x12, 0x3b, 0x6e, 0x11, 0x2d, 0x51, 0xfe, 0xfb, 0x60, 0xd4,
	0xa0, 0x1f, 0xb6, 0x83, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x30, 0x9c, 0xf7, 0xdb, 0xc4, 0x09,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrchestratorClient interface {
	// Called by the broadcaster to request transcoder info from an orchestrator.
	GetOrchestrator(ctx context.Context, in *OrchestratorRequest, opts ...grpc.CallOption) (*OrchestratorInfo, error)
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
}

type orchestratorClient struct {
	cc *grpc.ClientConn
}

func NewOrchestratorClient(cc *grpc.ClientConn) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) GetOrchestrator(ctx context.Context, in *OrchestratorRequest, opts ...grpc.CallOption) (*OrchestratorInfo, error) {
	out := new(OrchestratorInfo)
	err := c.cc.Invoke(ctx, "/net.Orchestrator/GetOrchestrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	out := new(PingPong)
	err := c.cc.Invoke(ctx, "/net.Orchestrator/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServer is the server API for Orchestrator service.
type OrchestratorServer interface {
	// Called by the broadcaster to request transcoder info from an orchestrator.
	GetOrchestrator(context.Context, *OrchestratorRequest) (*OrchestratorInfo, error)
	Ping(context.Context, *PingPong) (*PingPong, error)
}

// UnimplementedOrchestratorServer can be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServer struct {
}

func (*UnimplementedOrchestratorServer) GetOrchestrator(ctx context.Context, req *OrchestratorRequest) (*OrchestratorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrchestrator not implemented")
}
func (*UnimplementedOrchestratorServer) Ping(ctx context.Context, req *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterOrchestratorServer(s *grpc.Server, srv OrchestratorServer) {
	s.RegisterService(&_Orchestrator_serviceDesc, srv)
}

func _Orchestrator_GetOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchestratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.Orchestrator/GetOrchestrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetOrchestrator(ctx, req.(*OrchestratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.Orchestrator/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

var _Orchestrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "net.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrchestrator",
			Handler:    _Orchestrator_GetOrchestrator_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Orchestrator_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "net/lp_rpc.proto",
}

// TranscoderClient is the client API for Transcoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranscoderClient interface {
	// Called by the transcoder to register to an orchestrator. The orchestrator
	// notifies registered transcoders of segments as they come in.
	RegisterTranscoder(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (Transcoder_RegisterTranscoderClient, error)
}

type transcoderClient struct {
	cc *grpc.ClientConn
}

func NewTranscoderClient(cc *grpc.ClientConn) TranscoderClient {
	return &transcoderClient{cc}
}

func (c *transcoderClient) RegisterTranscoder(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (Transcoder_RegisterTranscoderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transcoder_serviceDesc.Streams[0], "/net.Transcoder/RegisterTranscoder", opts...)
	if err != nil {
		return nil, err
	}
	x := &transcoderRegisterTranscoderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transcoder_RegisterTranscoderClient interface {
	Recv() (*NotifySegment, error)
	grpc.ClientStream
}

type transcoderRegisterTranscoderClient struct {
	grpc.ClientStream
}

func (x *transcoderRegisterTranscoderClient) Recv() (*NotifySegment, error) {
	m := new(NotifySegment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TranscoderServer is the server API for Transcoder service.
type TranscoderServer interface {
	// Called by the transcoder to register to an orchestrator. The orchestrator
	// notifies registered transcoders of segments as they come in.
	RegisterTranscoder(*RegisterRequest, Transcoder_RegisterTranscoderServer) error
}

// UnimplementedTranscoderServer can be embedded to have forward compatible implementations.
type UnimplementedTranscoderServer struct {
}

func (*UnimplementedTranscoderServer) RegisterTranscoder(req *RegisterRequest, srv Transcoder_RegisterTranscoderServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterTranscoder not implemented")
}

func RegisterTranscoderServer(s *grpc.Server, srv TranscoderServer) {
	s.RegisterService(&_Transcoder_serviceDesc, srv)
}

func _Transcoder_RegisterTranscoder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TranscoderServer).RegisterTranscoder(m, &transcoderRegisterTranscoderServer{stream})
}

type Transcoder_RegisterTranscoderServer interface {
	Send(*NotifySegment) error
	grpc.ServerStream
}

type transcoderRegisterTranscoderServer struct {
	grpc.ServerStream
}

func (x *transcoderRegisterTranscoderServer) Send(m *NotifySegment) error {
	return x.ServerStream.SendMsg(m)
}

var _Transcoder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "net.Transcoder",
	HandlerType: (*TranscoderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterTranscoder",
			Handler:       _Transcoder_RegisterTranscoder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "net/lp_rpc.proto",
}
