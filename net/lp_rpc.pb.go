// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: net/lp_rpc.proto

package net

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OSInfo_StorageType int32

const (
	OSInfo_DIRECT OSInfo_StorageType = 0
	OSInfo_S3     OSInfo_StorageType = 1
	OSInfo_GOOGLE OSInfo_StorageType = 2
)

// Enum value maps for OSInfo_StorageType.
var (
	OSInfo_StorageType_name = map[int32]string{
		0: "DIRECT",
		1: "S3",
		2: "GOOGLE",
	}
	OSInfo_StorageType_value = map[string]int32{
		"DIRECT": 0,
		"S3":     1,
		"GOOGLE": 2,
	}
)

func (x OSInfo_StorageType) Enum() *OSInfo_StorageType {
	p := new(OSInfo_StorageType)
	*p = x
	return p
}

func (x OSInfo_StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OSInfo_StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[0].Descriptor()
}

func (OSInfo_StorageType) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[0]
}

func (x OSInfo_StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OSInfo_StorageType.Descriptor instead.
func (OSInfo_StorageType) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{4, 0}
}

// Desired output format
type VideoProfile_Format int32

const (
	VideoProfile_MPEGTS VideoProfile_Format = 0
	VideoProfile_MP4    VideoProfile_Format = 1
)

// Enum value maps for VideoProfile_Format.
var (
	VideoProfile_Format_name = map[int32]string{
		0: "MPEGTS",
		1: "MP4",
	}
	VideoProfile_Format_value = map[string]int32{
		"MPEGTS": 0,
		"MP4":    1,
	}
)

func (x VideoProfile_Format) Enum() *VideoProfile_Format {
	p := new(VideoProfile_Format)
	*p = x
	return p
}

func (x VideoProfile_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProfile_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[1].Descriptor()
}

func (VideoProfile_Format) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[1]
}

func (x VideoProfile_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProfile_Format.Descriptor instead.
func (VideoProfile_Format) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12, 0}
}

type VideoProfile_Profile int32

const (
	VideoProfile_ENCODER_DEFAULT       VideoProfile_Profile = 0
	VideoProfile_H264_BASELINE         VideoProfile_Profile = 1
	VideoProfile_H264_MAIN             VideoProfile_Profile = 2
	VideoProfile_H264_HIGH             VideoProfile_Profile = 3
	VideoProfile_H264_CONSTRAINED_HIGH VideoProfile_Profile = 4
)

// Enum value maps for VideoProfile_Profile.
var (
	VideoProfile_Profile_name = map[int32]string{
		0: "ENCODER_DEFAULT",
		1: "H264_BASELINE",
		2: "H264_MAIN",
		3: "H264_HIGH",
		4: "H264_CONSTRAINED_HIGH",
	}
	VideoProfile_Profile_value = map[string]int32{
		"ENCODER_DEFAULT":       0,
		"H264_BASELINE":         1,
		"H264_MAIN":             2,
		"H264_HIGH":             3,
		"H264_CONSTRAINED_HIGH": 4,
	}
)

func (x VideoProfile_Profile) Enum() *VideoProfile_Profile {
	p := new(VideoProfile_Profile)
	*p = x
	return p
}

func (x VideoProfile_Profile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProfile_Profile) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[2].Descriptor()
}

func (VideoProfile_Profile) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[2]
}

func (x VideoProfile_Profile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProfile_Profile.Descriptor instead.
func (VideoProfile_Profile) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12, 1}
}

type VideoProfile_VideoCodec int32

const (
	VideoProfile_H264 VideoProfile_VideoCodec = 0
	VideoProfile_H265 VideoProfile_VideoCodec = 1
	VideoProfile_VP8  VideoProfile_VideoCodec = 2
	VideoProfile_VP9  VideoProfile_VideoCodec = 3
)

// Enum value maps for VideoProfile_VideoCodec.
var (
	VideoProfile_VideoCodec_name = map[int32]string{
		0: "H264",
		1: "H265",
		2: "VP8",
		3: "VP9",
	}
	VideoProfile_VideoCodec_value = map[string]int32{
		"H264": 0,
		"H265": 1,
		"VP8":  2,
		"VP9":  3,
	}
)

func (x VideoProfile_VideoCodec) Enum() *VideoProfile_VideoCodec {
	p := new(VideoProfile_VideoCodec)
	*p = x
	return p
}

func (x VideoProfile_VideoCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProfile_VideoCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[3].Descriptor()
}

func (VideoProfile_VideoCodec) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[3]
}

func (x VideoProfile_VideoCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProfile_VideoCodec.Descriptor instead.
func (VideoProfile_VideoCodec) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12, 2}
}

type VideoProfile_ChromaSubsampling int32

const (
	VideoProfile_CHROMA_420 VideoProfile_ChromaSubsampling = 0
	VideoProfile_CHROMA_422 VideoProfile_ChromaSubsampling = 1
	VideoProfile_CHROMA_444 VideoProfile_ChromaSubsampling = 2
)

// Enum value maps for VideoProfile_ChromaSubsampling.
var (
	VideoProfile_ChromaSubsampling_name = map[int32]string{
		0: "CHROMA_420",
		1: "CHROMA_422",
		2: "CHROMA_444",
	}
	VideoProfile_ChromaSubsampling_value = map[string]int32{
		"CHROMA_420": 0,
		"CHROMA_422": 1,
		"CHROMA_444": 2,
	}
)

func (x VideoProfile_ChromaSubsampling) Enum() *VideoProfile_ChromaSubsampling {
	p := new(VideoProfile_ChromaSubsampling)
	*p = x
	return p
}

func (x VideoProfile_ChromaSubsampling) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProfile_ChromaSubsampling) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[4].Descriptor()
}

func (VideoProfile_ChromaSubsampling) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[4]
}

func (x VideoProfile_ChromaSubsampling) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProfile_ChromaSubsampling.Descriptor instead.
func (VideoProfile_ChromaSubsampling) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12, 3}
}

type PingPong struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Implementation defined
	Value         []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingPong) Reset() {
	*x = PingPong{}
	mi := &file_net_lp_rpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingPong) ProtoMessage() {}

func (x *PingPong) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingPong.ProtoReflect.Descriptor instead.
func (*PingPong) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *PingPong) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// sent by Broadcaster to Orchestrator to terminate the transcoding session and
// free resources (used for verification sessions)
type EndTranscodingSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data for transcoding authentication
	AuthToken     *AuthToken `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndTranscodingSessionRequest) Reset() {
	*x = EndTranscodingSessionRequest{}
	mi := &file_net_lp_rpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndTranscodingSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTranscodingSessionRequest) ProtoMessage() {}

func (x *EndTranscodingSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTranscodingSessionRequest.ProtoReflect.Descriptor instead.
func (*EndTranscodingSessionRequest) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *EndTranscodingSessionRequest) GetAuthToken() *AuthToken {
	if x != nil {
		return x.AuthToken
	}
	return nil
}

type EndTranscodingSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndTranscodingSessionResponse) Reset() {
	*x = EndTranscodingSessionResponse{}
	mi := &file_net_lp_rpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndTranscodingSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTranscodingSessionResponse) ProtoMessage() {}

func (x *EndTranscodingSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTranscodingSessionResponse.ProtoReflect.Descriptor instead.
func (*EndTranscodingSessionResponse) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{2}
}

// This request is sent by the broadcaster in `GetTranscoder` to request
// information on which transcoder to use.
type OrchestratorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ethereum address of the broadcaster
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Broadcaster's signature over its address
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	// Features and constraints required by the broadcaster
	Capabilities *Capabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Don't throw error in case of missing capacity, used for refreshing session
	// when we don't need to check capacity
	IgnoreCapacityCheck bool `protobuf:"varint,4,opt,name=ignoreCapacityCheck,proto3" json:"ignoreCapacityCheck,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OrchestratorRequest) Reset() {
	*x = OrchestratorRequest{}
	mi := &file_net_lp_rpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrchestratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorRequest) ProtoMessage() {}

func (x *OrchestratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorRequest.ProtoReflect.Descriptor instead.
func (*OrchestratorRequest) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *OrchestratorRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OrchestratorRequest) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *OrchestratorRequest) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *OrchestratorRequest) GetIgnoreCapacityCheck() bool {
	if x != nil {
		return x.IgnoreCapacityCheck
	}
	return false
}

// OSInfo needed to negotiate storages that will be used.
// It carries info needed to write to the storage.
type OSInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Storage type: direct, s3, ipfs.
	StorageType   OSInfo_StorageType `protobuf:"varint,1,opt,name=storageType,proto3,enum=net.OSInfo_StorageType" json:"storageType,omitempty"`
	S3Info        *S3OSInfo          `protobuf:"bytes,16,opt,name=s3info,proto3" json:"s3info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OSInfo) Reset() {
	*x = OSInfo{}
	mi := &file_net_lp_rpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSInfo) ProtoMessage() {}

func (x *OSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSInfo.ProtoReflect.Descriptor instead.
func (*OSInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *OSInfo) GetStorageType() OSInfo_StorageType {
	if x != nil {
		return x.StorageType
	}
	return OSInfo_DIRECT
}

func (x *OSInfo) GetS3Info() *S3OSInfo {
	if x != nil {
		return x.S3Info
	}
	return nil
}

type S3OSInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host to use to connect to S3
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Key (prefix) to use when uploading the object.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// POST policy that S3 owner node creates to give write access to other node.
	Policy string `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	// Signature for POST policy.
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// Needed for POST policy.
	Credential string `protobuf:"bytes,5,opt,name=credential,proto3" json:"credential,omitempty"`
	// Needed for POST policy.
	XAmzDate      string `protobuf:"bytes,6,opt,name=xAmzDate,proto3" json:"xAmzDate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3OSInfo) Reset() {
	*x = S3OSInfo{}
	mi := &file_net_lp_rpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3OSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3OSInfo) ProtoMessage() {}

func (x *S3OSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3OSInfo.ProtoReflect.Descriptor instead.
func (*S3OSInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *S3OSInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *S3OSInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *S3OSInfo) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *S3OSInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *S3OSInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *S3OSInfo) GetXAmzDate() string {
	if x != nil {
		return x.XAmzDate
	}
	return ""
}

// PriceInfo conveys pricing info for transcoding services
type PriceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// price in wei
	PricePerUnit int64 `protobuf:"varint,1,opt,name=pricePerUnit,proto3" json:"pricePerUnit,omitempty"`
	// Pixels covered in the price
	// Set price to 1 wei and pixelsPerUnit > 1 to have a smaller price
	// granularity per pixel than 1 wei
	PixelsPerUnit int64 `protobuf:"varint,2,opt,name=pixelsPerUnit,proto3" json:"pixelsPerUnit,omitempty"`
	// Capability price is for
	Capability uint32 `protobuf:"varint,3,opt,name=capability,proto3" json:"capability,omitempty"`
	// constraint price is for
	Constraint    string `protobuf:"bytes,4,opt,name=constraint,proto3" json:"constraint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceInfo) Reset() {
	*x = PriceInfo{}
	mi := &file_net_lp_rpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceInfo) ProtoMessage() {}

func (x *PriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceInfo.ProtoReflect.Descriptor instead.
func (*PriceInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *PriceInfo) GetPricePerUnit() int64 {
	if x != nil {
		return x.PricePerUnit
	}
	return 0
}

func (x *PriceInfo) GetPixelsPerUnit() int64 {
	if x != nil {
		return x.PixelsPerUnit
	}
	return 0
}

func (x *PriceInfo) GetCapability() uint32 {
	if x != nil {
		return x.Capability
	}
	return 0
}

func (x *PriceInfo) GetConstraint() string {
	if x != nil {
		return x.Constraint
	}
	return ""
}

type Capabilities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bit string of supported features - one bit per feature
	Bitstring []uint64 `protobuf:"varint,1,rep,packed,name=bitstring,proto3" json:"bitstring,omitempty"`
	// Bit string of features that are required to be supported
	Mandatories []uint64 `protobuf:"varint,2,rep,packed,name=mandatories,proto3" json:"mandatories,omitempty"`
	// Capacity corresponding to each capability
	Capacities    map[uint32]uint32         `protobuf:"bytes,3,rep,name=capacities,proto3" json:"capacities,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Version       string                    `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Constraints   *Capabilities_Constraints `protobuf:"bytes,5,opt,name=constraints,proto3" json:"constraints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	mi := &file_net_lp_rpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *Capabilities) GetBitstring() []uint64 {
	if x != nil {
		return x.Bitstring
	}
	return nil
}

func (x *Capabilities) GetMandatories() []uint64 {
	if x != nil {
		return x.Mandatories
	}
	return nil
}

func (x *Capabilities) GetCapacities() map[uint32]uint32 {
	if x != nil {
		return x.Capacities
	}
	return nil
}

func (x *Capabilities) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Capabilities) GetConstraints() *Capabilities_Constraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// The orchestrator sends this in response to `GetOrchestrator`, containing
// miscellaneous data related to the job.
type OrchestratorInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URI of the transcoder to use for submitting segments.
	Transcoder string `protobuf:"bytes,1,opt,name=transcoder,proto3" json:"transcoder,omitempty"`
	// Parameters for probabilistic micropayment tickets
	TicketParams *TicketParams `protobuf:"bytes,2,opt,name=ticket_params,json=ticketParams,proto3" json:"ticket_params,omitempty"`
	// Price Info containing the price per pixel to transcode
	PriceInfo *PriceInfo `protobuf:"bytes,3,opt,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`
	// ETH address that should sign transcoded results
	Address []byte `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Features and constraints supported by the orchestrator
	Capabilities *Capabilities `protobuf:"bytes,5,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Data for transcoding authentication
	AuthToken *AuthToken `protobuf:"bytes,6,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// Information on Orchestrator hardware
	Hardware []*HardwareInformation `protobuf:"bytes,7,rep,name=hardware,proto3" json:"hardware,omitempty"`
	// Orchestrator returns info about own input object storage, if it wants it to
	// be used.
	Storage []*OSInfo `protobuf:"bytes,32,rep,name=storage,proto3" json:"storage,omitempty"`
	// prices for capabilities
	CapabilitiesPrices []*PriceInfo `protobuf:"bytes,33,rep,name=capabilities_prices,json=capabilitiesPrices,proto3" json:"capabilities_prices,omitempty"`
	// List of other node URIs belonging to this orchestrator.
	Nodes         []string `protobuf:"bytes,34,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrchestratorInfo) Reset() {
	*x = OrchestratorInfo{}
	mi := &file_net_lp_rpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrchestratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorInfo) ProtoMessage() {}

func (x *OrchestratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorInfo.ProtoReflect.Descriptor instead.
func (*OrchestratorInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *OrchestratorInfo) GetTranscoder() string {
	if x != nil {
		return x.Transcoder
	}
	return ""
}

func (x *OrchestratorInfo) GetTicketParams() *TicketParams {
	if x != nil {
		return x.TicketParams
	}
	return nil
}

func (x *OrchestratorInfo) GetPriceInfo() *PriceInfo {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

func (x *OrchestratorInfo) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OrchestratorInfo) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *OrchestratorInfo) GetAuthToken() *AuthToken {
	if x != nil {
		return x.AuthToken
	}
	return nil
}

func (x *OrchestratorInfo) GetHardware() []*HardwareInformation {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *OrchestratorInfo) GetStorage() []*OSInfo {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *OrchestratorInfo) GetCapabilitiesPrices() []*PriceInfo {
	if x != nil {
		return x.CapabilitiesPrices
	}
	return nil
}

func (x *OrchestratorInfo) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Data for transcoding authentication that is included in the OrchestratorInfo
// message during discovery
type AuthToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Record used to authenticate for a transcode session
	// Opaque to the receiver
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// ID of the transcode session that the token is authenticating for
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Timestamp when the token expires
	Expiration    int64 `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthToken) Reset() {
	*x = AuthToken{}
	mi := &file_net_lp_rpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthToken) ProtoMessage() {}

func (x *AuthToken) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthToken.ProtoReflect.Descriptor instead.
func (*AuthToken) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *AuthToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AuthToken) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AuthToken) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

// Data included by the broadcaster when submitting a segment for transcoding.
type SegData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Manifest ID this segment belongs to
	ManifestId []byte `protobuf:"bytes,1,opt,name=manifestId,proto3" json:"manifestId,omitempty"`
	// Sequence number of the segment to be transcoded
	Seq int64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// Hash of the segment data to be transcoded
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Transcoding profiles to use
	Profiles []byte `protobuf:"bytes,4,opt,name=profiles,proto3" json:"profiles,omitempty"`
	// Broadcaster signature for the segment. Corresponds to:
	// broadcaster.sign(manifestId | seqNo | dataHash | profiles)
	Sig []byte `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	// Duration of the segment to be transcoded, in milliseconds
	Duration int32 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// Capabilities used by this segment.
	Capabilities *Capabilities `protobuf:"bytes,7,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Data for transcoding authentication
	AuthToken *AuthToken `protobuf:"bytes,8,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// Calculate perceptual hash for this segment
	CalcPerceptualHash bool `protobuf:"varint,10,opt,name=calc_perceptual_hash,json=calcPerceptualHash,proto3" json:"calc_perceptual_hash,omitempty"`
	// Broadcaster's preferred storage medium(s)
	// XXX should we include this in a sig somewhere until certs are
	// authenticated?
	Storage []*OSInfo `protobuf:"bytes,32,rep,name=storage,proto3" json:"storage,omitempty"`
	// Transcoding profiles to use. Supersedes `profiles` field
	// Deprecated by `fullProfiles2` but may still be used for mpegts formats
	FullProfiles []*VideoProfile `protobuf:"bytes,33,rep,name=fullProfiles,proto3" json:"fullProfiles,omitempty"`
	// Transcoding profiles to use. Supersedes `fullProfiles` field
	// Deprecated by `fullProfiles3` but may still be used for integer FPS
	FullProfiles2 []*VideoProfile `protobuf:"bytes,34,rep,name=fullProfiles2,proto3" json:"fullProfiles2,omitempty"`
	// Transcoding profiles to use. Supersedes `fullProfiles2` field
	FullProfiles3 []*VideoProfile `protobuf:"bytes,35,rep,name=fullProfiles3,proto3" json:"fullProfiles3,omitempty"`
	// Transcoding parameters specific to this segment
	SegmentParameters *SegParameters `protobuf:"bytes,37,opt,name=segment_parameters,json=segmentParameters,proto3" json:"segment_parameters,omitempty"`
	// Force HW Session Reinit
	ForceSessionReinit bool `protobuf:"varint,38,opt,name=ForceSessionReinit,proto3" json:"ForceSessionReinit,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SegData) Reset() {
	*x = SegData{}
	mi := &file_net_lp_rpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegData) ProtoMessage() {}

func (x *SegData) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegData.ProtoReflect.Descriptor instead.
func (*SegData) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *SegData) GetManifestId() []byte {
	if x != nil {
		return x.ManifestId
	}
	return nil
}

func (x *SegData) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *SegData) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SegData) GetProfiles() []byte {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *SegData) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *SegData) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SegData) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *SegData) GetAuthToken() *AuthToken {
	if x != nil {
		return x.AuthToken
	}
	return nil
}

func (x *SegData) GetCalcPerceptualHash() bool {
	if x != nil {
		return x.CalcPerceptualHash
	}
	return false
}

func (x *SegData) GetStorage() []*OSInfo {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *SegData) GetFullProfiles() []*VideoProfile {
	if x != nil {
		return x.FullProfiles
	}
	return nil
}

func (x *SegData) GetFullProfiles2() []*VideoProfile {
	if x != nil {
		return x.FullProfiles2
	}
	return nil
}

func (x *SegData) GetFullProfiles3() []*VideoProfile {
	if x != nil {
		return x.FullProfiles3
	}
	return nil
}

func (x *SegData) GetSegmentParameters() *SegParameters {
	if x != nil {
		return x.SegmentParameters
	}
	return nil
}

func (x *SegData) GetForceSessionReinit() bool {
	if x != nil {
		return x.ForceSessionReinit
	}
	return false
}

type SegParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start timestamp from which to start encoding
	// Milliseconds, from start of the file
	From uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	// Skip all frames after that timestamp
	// Milliseconds, from start of the file
	To            uint64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegParameters) Reset() {
	*x = SegParameters{}
	mi := &file_net_lp_rpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegParameters) ProtoMessage() {}

func (x *SegParameters) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegParameters.ProtoReflect.Descriptor instead.
func (*SegParameters) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *SegParameters) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SegParameters) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type VideoProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of VideoProfile
	Name string `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	// Width of VideoProfile
	Width int32 `protobuf:"varint,17,opt,name=width,proto3" json:"width,omitempty"`
	// Height of VideoProfile
	Height int32 `protobuf:"varint,18,opt,name=height,proto3" json:"height,omitempty"`
	// Bitrate of VideoProfile
	Bitrate int32 `protobuf:"varint,19,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// FPS of VideoProfile
	Fps    uint32              `protobuf:"varint,20,opt,name=fps,proto3" json:"fps,omitempty"`
	Format VideoProfile_Format `protobuf:"varint,21,opt,name=format,proto3,enum=net.VideoProfile_Format" json:"format,omitempty"`
	// FPS Denominator of VideoProfile
	FpsDen uint32 `protobuf:"varint,22,opt,name=fpsDen,proto3" json:"fpsDen,omitempty"`
	// Desired codec profile
	Profile VideoProfile_Profile `protobuf:"varint,23,opt,name=profile,proto3,enum=net.VideoProfile_Profile" json:"profile,omitempty"`
	// GOP interval
	Gop int32 `protobuf:"varint,24,opt,name=gop,proto3" json:"gop,omitempty"`
	// Encoder (video codec)
	Encoder       VideoProfile_VideoCodec        `protobuf:"varint,25,opt,name=encoder,proto3,enum=net.VideoProfile_VideoCodec" json:"encoder,omitempty"`
	ColorDepth    int32                          `protobuf:"varint,26,opt,name=colorDepth,proto3" json:"colorDepth,omitempty"`
	ChromaFormat  VideoProfile_ChromaSubsampling `protobuf:"varint,27,opt,name=chromaFormat,proto3,enum=net.VideoProfile_ChromaSubsampling" json:"chromaFormat,omitempty"`
	Quality       uint32                         `protobuf:"varint,28,opt,name=quality,proto3" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoProfile) Reset() {
	*x = VideoProfile{}
	mi := &file_net_lp_rpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoProfile) ProtoMessage() {}

func (x *VideoProfile) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoProfile.ProtoReflect.Descriptor instead.
func (*VideoProfile) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *VideoProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoProfile) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoProfile) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoProfile) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VideoProfile) GetFps() uint32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *VideoProfile) GetFormat() VideoProfile_Format {
	if x != nil {
		return x.Format
	}
	return VideoProfile_MPEGTS
}

func (x *VideoProfile) GetFpsDen() uint32 {
	if x != nil {
		return x.FpsDen
	}
	return 0
}

func (x *VideoProfile) GetProfile() VideoProfile_Profile {
	if x != nil {
		return x.Profile
	}
	return VideoProfile_ENCODER_DEFAULT
}

func (x *VideoProfile) GetGop() int32 {
	if x != nil {
		return x.Gop
	}
	return 0
}

func (x *VideoProfile) GetEncoder() VideoProfile_VideoCodec {
	if x != nil {
		return x.Encoder
	}
	return VideoProfile_H264
}

func (x *VideoProfile) GetColorDepth() int32 {
	if x != nil {
		return x.ColorDepth
	}
	return 0
}

func (x *VideoProfile) GetChromaFormat() VideoProfile_ChromaSubsampling {
	if x != nil {
		return x.ChromaFormat
	}
	return VideoProfile_CHROMA_420
}

func (x *VideoProfile) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

// Individual transcoded segment data.
type TranscodedSegmentData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL where the transcoded data can be downloaded from.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Amount of pixels processed (output pixels)
	Pixels int64 `protobuf:"varint,2,opt,name=pixels,proto3" json:"pixels,omitempty"`
	// URL where the perceptual hash data can be downloaded from (can be empty)
	PerceptualHashUrl string `protobuf:"bytes,3,opt,name=perceptual_hash_url,json=perceptualHashUrl,proto3" json:"perceptual_hash_url,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TranscodedSegmentData) Reset() {
	*x = TranscodedSegmentData{}
	mi := &file_net_lp_rpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscodedSegmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodedSegmentData) ProtoMessage() {}

func (x *TranscodedSegmentData) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodedSegmentData.ProtoReflect.Descriptor instead.
func (*TranscodedSegmentData) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *TranscodedSegmentData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TranscodedSegmentData) GetPixels() int64 {
	if x != nil {
		return x.Pixels
	}
	return 0
}

func (x *TranscodedSegmentData) GetPerceptualHashUrl() string {
	if x != nil {
		return x.PerceptualHashUrl
	}
	return ""
}

// A set of transcoded segments following the profiles specified in the job.
type TranscodeData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transcoded data, in the order specified in the job options
	Segments []*TranscodedSegmentData `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	// Signature of the hash of the concatenated hashes
	Sig           []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscodeData) Reset() {
	*x = TranscodeData{}
	mi := &file_net_lp_rpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeData) ProtoMessage() {}

func (x *TranscodeData) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeData.ProtoReflect.Descriptor instead.
func (*TranscodeData) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *TranscodeData) GetSegments() []*TranscodedSegmentData {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *TranscodeData) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// Response that a transcoder sends after transcoding a segment.
type TranscodeResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sequence number of the transcoded results.
	Seq int64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Result of transcoding can be an error, or successful with more info
	//
	// Types that are valid to be assigned to Result:
	//
	//	*TranscodeResult_Error
	//	*TranscodeResult_Data
	Result isTranscodeResult_Result `protobuf_oneof:"result"`
	// Used to notify a broadcaster of updated orchestrator information
	Info          *OrchestratorInfo `protobuf:"bytes,16,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscodeResult) Reset() {
	*x = TranscodeResult{}
	mi := &file_net_lp_rpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeResult) ProtoMessage() {}

func (x *TranscodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeResult.ProtoReflect.Descriptor instead.
func (*TranscodeResult) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *TranscodeResult) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *TranscodeResult) GetResult() isTranscodeResult_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TranscodeResult) GetError() string {
	if x != nil {
		if x, ok := x.Result.(*TranscodeResult_Error); ok {
			return x.Error
		}
	}
	return ""
}

func (x *TranscodeResult) GetData() *TranscodeData {
	if x != nil {
		if x, ok := x.Result.(*TranscodeResult_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *TranscodeResult) GetInfo() *OrchestratorInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type isTranscodeResult_Result interface {
	isTranscodeResult_Result()
}

type TranscodeResult_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type TranscodeResult_Data struct {
	Data *TranscodeData `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

func (*TranscodeResult_Error) isTranscodeResult_Result() {}

func (*TranscodeResult_Data) isTranscodeResult_Result() {}

// Response that an orchestrator sends after processing a payment.
type PaymentResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to notify a broadcaster of updated orchestrator information
	Info          *OrchestratorInfo `protobuf:"bytes,16,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaymentResult) Reset() {
	*x = PaymentResult{}
	mi := &file_net_lp_rpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentResult) ProtoMessage() {}

func (x *PaymentResult) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentResult.ProtoReflect.Descriptor instead.
func (*PaymentResult) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *PaymentResult) GetInfo() *OrchestratorInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// Sent by the transcoder to register itself to the orchestrator.
type RegisterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shared secret for auth
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	// Transcoder capacity
	Capacity int64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Transcoder capabilities
	Capabilities  *Capabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_net_lp_rpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterRequest) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *RegisterRequest) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Sent by the orchestrator to the transcoder
type NotifySegment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL of the segment to transcode.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Configuration for the transcoding job
	SegData *SegData `protobuf:"bytes,3,opt,name=segData,proto3" json:"segData,omitempty"`
	// ID for this particular transcoding task.
	TaskId int64 `protobuf:"varint,16,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// Orchestrator identifier for segment metadata
	OrchId string `protobuf:"bytes,18,opt,name=orchId,proto3" json:"orchId,omitempty"`
	// Deprecated by fullProfiles. Set of presets to transcode into.
	// Should be set to an invalid value to induce failures
	Profiles      []byte `protobuf:"bytes,17,opt,name=profiles,proto3" json:"profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifySegment) Reset() {
	*x = NotifySegment{}
	mi := &file_net_lp_rpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifySegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySegment) ProtoMessage() {}

func (x *NotifySegment) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySegment.ProtoReflect.Descriptor instead.
func (*NotifySegment) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *NotifySegment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NotifySegment) GetSegData() *SegData {
	if x != nil {
		return x.SegData
	}
	return nil
}

func (x *NotifySegment) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *NotifySegment) GetOrchId() string {
	if x != nil {
		return x.OrchId
	}
	return ""
}

func (x *NotifySegment) GetProfiles() []byte {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// Sent by the aiworker to register itself to the orchestrator.
type RegisterAIWorkerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shared secret for auth
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	// AIWorker capabilities
	Capabilities *Capabilities `protobuf:"bytes,2,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// AIWorker hardware info
	Hardware      []*HardwareInformation `protobuf:"bytes,3,rep,name=hardware,proto3" json:"hardware,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAIWorkerRequest) Reset() {
	*x = RegisterAIWorkerRequest{}
	mi := &file_net_lp_rpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAIWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAIWorkerRequest) ProtoMessage() {}

func (x *RegisterAIWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAIWorkerRequest.ProtoReflect.Descriptor instead.
func (*RegisterAIWorkerRequest) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterAIWorkerRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterAIWorkerRequest) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *RegisterAIWorkerRequest) GetHardware() []*HardwareInformation {
	if x != nil {
		return x.Hardware
	}
	return nil
}

// Data included by the gateway when submitting a AI job.
type AIJobData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// pipeline to use for the job
	Pipeline string `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// AI job request data
	RequestData   []byte `protobuf:"bytes,2,opt,name=requestData,proto3" json:"requestData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIJobData) Reset() {
	*x = AIJobData{}
	mi := &file_net_lp_rpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIJobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIJobData) ProtoMessage() {}

func (x *AIJobData) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIJobData.ProtoReflect.Descriptor instead.
func (*AIJobData) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *AIJobData) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *AIJobData) GetRequestData() []byte {
	if x != nil {
		return x.RequestData
	}
	return nil
}

// Sent by the orchestrator to the aiworker
type NotifyAIJob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for the AI job
	AIJobData *AIJobData `protobuf:"bytes,1,opt,name=AIJobData,proto3" json:"AIJobData,omitempty"`
	// ID for this particular AI task.
	TaskId        int64 `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyAIJob) Reset() {
	*x = NotifyAIJob{}
	mi := &file_net_lp_rpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyAIJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyAIJob) ProtoMessage() {}

func (x *NotifyAIJob) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyAIJob.ProtoReflect.Descriptor instead.
func (*NotifyAIJob) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *NotifyAIJob) GetAIJobData() *AIJobData {
	if x != nil {
		return x.AIJobData
	}
	return nil
}

func (x *NotifyAIJob) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

// Required parameters for probabilistic micropayment tickets
type TicketParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ETH address of the recipient
	Recipient []byte `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Pay out (in Wei) to the recipient if the ticket wins
	FaceValue []byte `protobuf:"bytes,2,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	// Probability that the ticket wins
	WinProb []byte `protobuf:"bytes,3,opt,name=win_prob,json=winProb,proto3" json:"win_prob,omitempty"`
	// 32 byte keccak-256 hash commitment to a random number provided
	// by the recipient
	RecipientRandHash []byte `protobuf:"bytes,4,opt,name=recipient_rand_hash,json=recipientRandHash,proto3" json:"recipient_rand_hash,omitempty"`
	// Value generated by recipient that the recipient can use
	// to derive the random number corresponding to the recipient's hash
	// commitment
	Seed []byte `protobuf:"bytes,5,opt,name=seed,proto3" json:"seed,omitempty"`
	// Block number at which the current set of advertised TicketParams is no
	// longer valid
	ExpirationBlock []byte `protobuf:"bytes,6,opt,name=expiration_block,json=expirationBlock,proto3" json:"expiration_block,omitempty"`
	// Expected ticket expiration params
	ExpirationParams *TicketExpirationParams `protobuf:"bytes,7,opt,name=expiration_params,json=expirationParams,proto3" json:"expiration_params,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TicketParams) Reset() {
	*x = TicketParams{}
	mi := &file_net_lp_rpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketParams) ProtoMessage() {}

func (x *TicketParams) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketParams.ProtoReflect.Descriptor instead.
func (*TicketParams) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *TicketParams) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *TicketParams) GetFaceValue() []byte {
	if x != nil {
		return x.FaceValue
	}
	return nil
}

func (x *TicketParams) GetWinProb() []byte {
	if x != nil {
		return x.WinProb
	}
	return nil
}

func (x *TicketParams) GetRecipientRandHash() []byte {
	if x != nil {
		return x.RecipientRandHash
	}
	return nil
}

func (x *TicketParams) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *TicketParams) GetExpirationBlock() []byte {
	if x != nil {
		return x.ExpirationBlock
	}
	return nil
}

func (x *TicketParams) GetExpirationParams() *TicketExpirationParams {
	if x != nil {
		return x.ExpirationParams
	}
	return nil
}

// Sender Params (nonces and signatures)
type TicketSenderParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Monotonically increasing counter that makes the ticket
	// unique relative to a particular hash commitment to a recipient's random
	// number
	SenderNonce uint32 `protobuf:"varint,1,opt,name=sender_nonce,json=senderNonce,proto3" json:"sender_nonce,omitempty"`
	// Sender signature over the ticket
	Sig           []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketSenderParams) Reset() {
	*x = TicketSenderParams{}
	mi := &file_net_lp_rpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketSenderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketSenderParams) ProtoMessage() {}

func (x *TicketSenderParams) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketSenderParams.ProtoReflect.Descriptor instead.
func (*TicketSenderParams) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *TicketSenderParams) GetSenderNonce() uint32 {
	if x != nil {
		return x.SenderNonce
	}
	return 0
}

func (x *TicketSenderParams) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// Ticket params for expiration related validation
type TicketExpirationParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Round during which tickets are created
	CreationRound int64 `protobuf:"varint,1,opt,name=creation_round,json=creationRound,proto3" json:"creation_round,omitempty"`
	// Block hash associated with creation_round
	CreationRoundBlockHash []byte `protobuf:"bytes,2,opt,name=creation_round_block_hash,json=creationRoundBlockHash,proto3" json:"creation_round_block_hash,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TicketExpirationParams) Reset() {
	*x = TicketExpirationParams{}
	mi := &file_net_lp_rpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketExpirationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketExpirationParams) ProtoMessage() {}

func (x *TicketExpirationParams) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketExpirationParams.ProtoReflect.Descriptor instead.
func (*TicketExpirationParams) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *TicketExpirationParams) GetCreationRound() int64 {
	if x != nil {
		return x.CreationRound
	}
	return 0
}

func (x *TicketExpirationParams) GetCreationRoundBlockHash() []byte {
	if x != nil {
		return x.CreationRoundBlockHash
	}
	return nil
}

// Payment for transcoding video segments
// A payment can constitute of multiple tickets
// A broadcaster might need to send multiple tickets to top up his credit with
// an Orchestrator
type Payment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Probabilistic micropayment ticket parameters
	// These remain the same even when sending multiple tickets
	TicketParams *TicketParams `protobuf:"bytes,1,opt,name=ticket_params,json=ticketParams,proto3" json:"ticket_params,omitempty"`
	// ETH address of the sender
	Sender []byte `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Ticket params for expiration related validation
	ExpirationParams   *TicketExpirationParams `protobuf:"bytes,3,opt,name=expiration_params,json=expirationParams,proto3" json:"expiration_params,omitempty"`
	TicketSenderParams []*TicketSenderParams   `protobuf:"bytes,4,rep,name=ticket_sender_params,json=ticketSenderParams,proto3" json:"ticket_sender_params,omitempty"`
	// O's last known price
	ExpectedPrice *PriceInfo `protobuf:"bytes,5,opt,name=expected_price,json=expectedPrice,proto3" json:"expected_price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Payment) Reset() {
	*x = Payment{}
	mi := &file_net_lp_rpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *Payment) GetTicketParams() *TicketParams {
	if x != nil {
		return x.TicketParams
	}
	return nil
}

func (x *Payment) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Payment) GetExpirationParams() *TicketExpirationParams {
	if x != nil {
		return x.ExpirationParams
	}
	return nil
}

func (x *Payment) GetTicketSenderParams() []*TicketSenderParams {
	if x != nil {
		return x.TicketSenderParams
	}
	return nil
}

func (x *Payment) GetExpectedPrice() *PriceInfo {
	if x != nil {
		return x.ExpectedPrice
	}
	return nil
}

// GPU information used by worker on network
type GPUComputeInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// unique id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// gpu name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// compute version supported - major
	Major uint32 `protobuf:"varint,4,opt,name=major,proto3" json:"major,omitempty"`
	// compute version supported - minor
	Minor uint32 `protobuf:"varint,5,opt,name=minor,proto3" json:"minor,omitempty"`
	// GPU memory free
	MemoryFree int64 `protobuf:"varint,6,opt,name=memory_free,json=memoryFree,proto3" json:"memory_free,omitempty"`
	// GPU memory total
	MemoryTotal   int64 `protobuf:"varint,7,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GPUComputeInfo) Reset() {
	*x = GPUComputeInfo{}
	mi := &file_net_lp_rpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPUComputeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUComputeInfo) ProtoMessage() {}

func (x *GPUComputeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUComputeInfo.ProtoReflect.Descriptor instead.
func (*GPUComputeInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *GPUComputeInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GPUComputeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GPUComputeInfo) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *GPUComputeInfo) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *GPUComputeInfo) GetMemoryFree() int64 {
	if x != nil {
		return x.MemoryFree
	}
	return 0
}

func (x *GPUComputeInfo) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

// Hardware information for worker on network
type HardwareInformation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// pipeline hardware supports
	Pipeline string `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// model_id hardware supports
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// hardware for pipeline and model_id
	GpuInfo       map[string]*GPUComputeInfo `protobuf:"bytes,3,rep,name=gpu_info,json=gpuInfo,proto3" json:"gpu_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HardwareInformation) Reset() {
	*x = HardwareInformation{}
	mi := &file_net_lp_rpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardwareInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareInformation) ProtoMessage() {}

func (x *HardwareInformation) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareInformation.ProtoReflect.Descriptor instead.
func (*HardwareInformation) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *HardwareInformation) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *HardwareInformation) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *HardwareInformation) GetGpuInfo() map[string]*GPUComputeInfo {
	if x != nil {
		return x.GpuInfo
	}
	return nil
}

// Non-binary constraints.
type Capabilities_Constraints struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	MinVersion    string                                         `protobuf:"bytes,1,opt,name=minVersion,proto3" json:"minVersion,omitempty"`
	PerCapability map[uint32]*Capabilities_CapabilityConstraints `protobuf:"bytes,2,rep,name=PerCapability,proto3" json:"PerCapability,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capabilities_Constraints) Reset() {
	*x = Capabilities_Constraints{}
	mi := &file_net_lp_rpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capabilities_Constraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities_Constraints) ProtoMessage() {}

func (x *Capabilities_Constraints) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities_Constraints.ProtoReflect.Descriptor instead.
func (*Capabilities_Constraints) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Capabilities_Constraints) GetMinVersion() string {
	if x != nil {
		return x.MinVersion
	}
	return ""
}

func (x *Capabilities_Constraints) GetPerCapability() map[uint32]*Capabilities_CapabilityConstraints {
	if x != nil {
		return x.PerCapability
	}
	return nil
}

// Non-binary capability constraints, such as supported ranges.
type Capabilities_CapabilityConstraints struct {
	state         protoimpl.MessageState                                         `protogen:"open.v1"`
	Models        map[string]*Capabilities_CapabilityConstraints_ModelConstraint `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capabilities_CapabilityConstraints) Reset() {
	*x = Capabilities_CapabilityConstraints{}
	mi := &file_net_lp_rpc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capabilities_CapabilityConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities_CapabilityConstraints) ProtoMessage() {}

func (x *Capabilities_CapabilityConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities_CapabilityConstraints.ProtoReflect.Descriptor instead.
func (*Capabilities_CapabilityConstraints) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Capabilities_CapabilityConstraints) GetModels() map[string]*Capabilities_CapabilityConstraints_ModelConstraint {
	if x != nil {
		return x.Models
	}
	return nil
}

type Capabilities_CapabilityConstraints_ModelConstraint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Warm          bool                   `protobuf:"varint,1,opt,name=warm,proto3" json:"warm,omitempty"`
	Capacity      uint32                 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	RunnerVersion string                 `protobuf:"bytes,3,opt,name=runnerVersion,proto3" json:"runnerVersion,omitempty"`
	CapacityInUse uint32                 `protobuf:"varint,4,opt,name=capacityInUse,proto3" json:"capacityInUse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capabilities_CapabilityConstraints_ModelConstraint) Reset() {
	*x = Capabilities_CapabilityConstraints_ModelConstraint{}
	mi := &file_net_lp_rpc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capabilities_CapabilityConstraints_ModelConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities_CapabilityConstraints_ModelConstraint) ProtoMessage() {}

func (x *Capabilities_CapabilityConstraints_ModelConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities_CapabilityConstraints_ModelConstraint.ProtoReflect.Descriptor instead.
func (*Capabilities_CapabilityConstraints_ModelConstraint) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{7, 2, 0}
}

func (x *Capabilities_CapabilityConstraints_ModelConstraint) GetWarm() bool {
	if x != nil {
		return x.Warm
	}
	return false
}

func (x *Capabilities_CapabilityConstraints_ModelConstraint) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Capabilities_CapabilityConstraints_ModelConstraint) GetRunnerVersion() string {
	if x != nil {
		return x.RunnerVersion
	}
	return ""
}

func (x *Capabilities_CapabilityConstraints_ModelConstraint) GetCapacityInUse() uint32 {
	if x != nil {
		return x.CapacityInUse
	}
	return 0
}

var File_net_lp_rpc_proto protoreflect.FileDescriptor

const file_net_lp_rpc_proto_rawDesc = "" +
	"\n" +
	"\x10net/lp_rpc.proto\x12\x03net\" \n" +
	"\bPingPong\x12\x14\n" +
	"\x05value\x18\x01 \x01(\fR\x05value\"M\n" +
	"\x1cEndTranscodingSessionRequest\x12-\n" +
	"\n" +
	"auth_token\x18\x01 \x01(\v2\x0e.net.AuthTokenR\tauthToken\"\x1f\n" +
	"\x1dEndTranscodingSessionResponse\"\xaa\x01\n" +
	"\x13OrchestratorRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12\x10\n" +
	"\x03sig\x18\x02 \x01(\fR\x03sig\x125\n" +
	"\fcapabilities\x18\x03 \x01(\v2\x11.net.CapabilitiesR\fcapabilities\x120\n" +
	"\x13ignoreCapacityCheck\x18\x04 \x01(\bR\x13ignoreCapacityCheck\"\x99\x01\n" +
	"\x06OSInfo\x129\n" +
	"\vstorageType\x18\x01 \x01(\x0e2\x17.net.OSInfo.StorageTypeR\vstorageType\x12%\n" +
	"\x06s3info\x18\x10 \x01(\v2\r.net.S3OSInfoR\x06s3info\"-\n" +
	"\vStorageType\x12\n" +
	"\n" +
	"\x06DIRECT\x10\x00\x12\x06\n" +
	"\x02S3\x10\x01\x12\n" +
	"\n" +
	"\x06GOOGLE\x10\x02\"\xa2\x01\n" +
	"\bS3OSInfo\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x16\n" +
	"\x06policy\x18\x03 \x01(\tR\x06policy\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\tR\tsignature\x12\x1e\n" +
	"\n" +
	"credential\x18\x05 \x01(\tR\n" +
	"credential\x12\x1a\n" +
	"\bxAmzDate\x18\x06 \x01(\tR\bxAmzDate\"\x95\x01\n" +
	"\tPriceInfo\x12\"\n" +
	"\fpricePerUnit\x18\x01 \x01(\x03R\fpricePerUnit\x12$\n" +
	"\rpixelsPerUnit\x18\x02 \x01(\x03R\rpixelsPerUnit\x12\x1e\n" +
	"\n" +
	"capability\x18\x03 \x01(\rR\n" +
	"capability\x12\x1e\n" +
	"\n" +
	"constraint\x18\x04 \x01(\tR\n" +
	"constraint\"\x89\a\n" +
	"\fCapabilities\x12\x1c\n" +
	"\tbitstring\x18\x01 \x03(\x04R\tbitstring\x12 \n" +
	"\vmandatories\x18\x02 \x03(\x04R\vmandatories\x12A\n" +
	"\n" +
	"capacities\x18\x03 \x03(\v2!.net.Capabilities.CapacitiesEntryR\n" +
	"capacities\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12?\n" +
	"\vconstraints\x18\x05 \x01(\v2\x1d.net.Capabilities.ConstraintsR\vconstraints\x1a=\n" +
	"\x0fCapacitiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a\xf0\x01\n" +
	"\vConstraints\x12\x1e\n" +
	"\n" +
	"minVersion\x18\x01 \x01(\tR\n" +
	"minVersion\x12V\n" +
	"\rPerCapability\x18\x02 \x03(\v20.net.Capabilities.Constraints.PerCapabilityEntryR\rPerCapability\x1ai\n" +
	"\x12PerCapabilityEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12=\n" +
	"\x05value\x18\x02 \x01(\v2'.net.Capabilities.CapabilityConstraintsR\x05value:\x028\x01\x1a\xe8\x02\n" +
	"\x15CapabilityConstraints\x12K\n" +
	"\x06models\x18\x01 \x03(\v23.net.Capabilities.CapabilityConstraints.ModelsEntryR\x06models\x1a\x8d\x01\n" +
	"\x0fModelConstraint\x12\x12\n" +
	"\x04warm\x18\x01 \x01(\bR\x04warm\x12\x1a\n" +
	"\bcapacity\x18\x02 \x01(\rR\bcapacity\x12$\n" +
	"\rrunnerVersion\x18\x03 \x01(\tR\rrunnerVersion\x12$\n" +
	"\rcapacityInUse\x18\x04 \x01(\rR\rcapacityInUse\x1ar\n" +
	"\vModelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12M\n" +
	"\x05value\x18\x02 \x01(\v27.net.Capabilities.CapabilityConstraints.ModelConstraintR\x05value:\x028\x01\"\xcd\x03\n" +
	"\x10OrchestratorInfo\x12\x1e\n" +
	"\n" +
	"transcoder\x18\x01 \x01(\tR\n" +
	"transcoder\x126\n" +
	"\rticket_params\x18\x02 \x01(\v2\x11.net.TicketParamsR\fticketParams\x12-\n" +
	"\n" +
	"price_info\x18\x03 \x01(\v2\x0e.net.PriceInfoR\tpriceInfo\x12\x18\n" +
	"\aaddress\x18\x04 \x01(\fR\aaddress\x125\n" +
	"\fcapabilities\x18\x05 \x01(\v2\x11.net.CapabilitiesR\fcapabilities\x12-\n" +
	"\n" +
	"auth_token\x18\x06 \x01(\v2\x0e.net.AuthTokenR\tauthToken\x124\n" +
	"\bhardware\x18\a \x03(\v2\x18.net.HardwareInformationR\bhardware\x12%\n" +
	"\astorage\x18  \x03(\v2\v.net.OSInfoR\astorage\x12?\n" +
	"\x13capabilities_prices\x18! \x03(\v2\x0e.net.PriceInfoR\x12capabilitiesPrices\x12\x14\n" +
	"\x05nodes\x18\" \x03(\tR\x05nodes\"`\n" +
	"\tAuthToken\x12\x14\n" +
	"\x05token\x18\x01 \x01(\fR\x05token\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x1e\n" +
	"\n" +
	"expiration\x18\x03 \x01(\x03R\n" +
	"expiration\"\xf4\x04\n" +
	"\aSegData\x12\x1e\n" +
	"\n" +
	"manifestId\x18\x01 \x01(\fR\n" +
	"manifestId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x03R\x03seq\x12\x12\n" +
	"\x04hash\x18\x03 \x01(\fR\x04hash\x12\x1a\n" +
	"\bprofiles\x18\x04 \x01(\fR\bprofiles\x12\x10\n" +
	"\x03sig\x18\x05 \x01(\fR\x03sig\x12\x1a\n" +
	"\bduration\x18\x06 \x01(\x05R\bduration\x125\n" +
	"\fcapabilities\x18\a \x01(\v2\x11.net.CapabilitiesR\fcapabilities\x12-\n" +
	"\n" +
	"auth_token\x18\b \x01(\v2\x0e.net.AuthTokenR\tauthToken\x120\n" +
	"\x14calc_perceptual_hash\x18\n" +
	" \x01(\bR\x12calcPerceptualHash\x12%\n" +
	"\astorage\x18  \x03(\v2\v.net.OSInfoR\astorage\x125\n" +
	"\ffullProfiles\x18! \x03(\v2\x11.net.VideoProfileR\ffullProfiles\x127\n" +
	"\rfullProfiles2\x18\" \x03(\v2\x11.net.VideoProfileR\rfullProfiles2\x127\n" +
	"\rfullProfiles3\x18# \x03(\v2\x11.net.VideoProfileR\rfullProfiles3\x12A\n" +
	"\x12segment_parameters\x18% \x01(\v2\x12.net.SegParametersR\x11segmentParameters\x12.\n" +
	"\x12ForceSessionReinit\x18& \x01(\bR\x12ForceSessionReinit\"3\n" +
	"\rSegParameters\x12\x12\n" +
	"\x04from\x18\x01 \x01(\x04R\x04from\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\x04R\x02to\"\xcc\x05\n" +
	"\fVideoProfile\x12\x12\n" +
	"\x04name\x18\x10 \x01(\tR\x04name\x12\x14\n" +
	"\x05width\x18\x11 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x12 \x01(\x05R\x06height\x12\x18\n" +
	"\abitrate\x18\x13 \x01(\x05R\abitrate\x12\x10\n" +
	"\x03fps\x18\x14 \x01(\rR\x03fps\x120\n" +
	"\x06format\x18\x15 \x01(\x0e2\x18.net.VideoProfile.FormatR\x06format\x12\x16\n" +
	"\x06fpsDen\x18\x16 \x01(\rR\x06fpsDen\x123\n" +
	"\aprofile\x18\x17 \x01(\x0e2\x19.net.VideoProfile.ProfileR\aprofile\x12\x10\n" +
	"\x03gop\x18\x18 \x01(\x05R\x03gop\x126\n" +
	"\aencoder\x18\x19 \x01(\x0e2\x1c.net.VideoProfile.VideoCodecR\aencoder\x12\x1e\n" +
	"\n" +
	"colorDepth\x18\x1a \x01(\x05R\n" +
	"colorDepth\x12G\n" +
	"\fchromaFormat\x18\x1b \x01(\x0e2#.net.VideoProfile.ChromaSubsamplingR\fchromaFormat\x12\x18\n" +
	"\aquality\x18\x1c \x01(\rR\aquality\"\x1d\n" +
	"\x06Format\x12\n" +
	"\n" +
	"\x06MPEGTS\x10\x00\x12\a\n" +
	"\x03MP4\x10\x01\"j\n" +
	"\aProfile\x12\x13\n" +
	"\x0fENCODER_DEFAULT\x10\x00\x12\x11\n" +
	"\rH264_BASELINE\x10\x01\x12\r\n" +
	"\tH264_MAIN\x10\x02\x12\r\n" +
	"\tH264_HIGH\x10\x03\x12\x19\n" +
	"\x15H264_CONSTRAINED_HIGH\x10\x04\"2\n" +
	"\n" +
	"VideoCodec\x12\b\n" +
	"\x04H264\x10\x00\x12\b\n" +
	"\x04H265\x10\x01\x12\a\n" +
	"\x03VP8\x10\x02\x12\a\n" +
	"\x03VP9\x10\x03\"C\n" +
	"\x11ChromaSubsampling\x12\x0e\n" +
	"\n" +
	"CHROMA_420\x10\x00\x12\x0e\n" +
	"\n" +
	"CHROMA_422\x10\x01\x12\x0e\n" +
	"\n" +
	"CHROMA_444\x10\x02\"q\n" +
	"\x15TranscodedSegmentData\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x16\n" +
	"\x06pixels\x18\x02 \x01(\x03R\x06pixels\x12.\n" +
	"\x13perceptual_hash_url\x18\x03 \x01(\tR\x11perceptualHashUrl\"Y\n" +
	"\rTranscodeData\x126\n" +
	"\bsegments\x18\x01 \x03(\v2\x1a.net.TranscodedSegmentDataR\bsegments\x12\x10\n" +
	"\x03sig\x18\x02 \x01(\fR\x03sig\"\x9a\x01\n" +
	"\x0fTranscodeResult\x12\x10\n" +
	"\x03seq\x18\x01 \x01(\x03R\x03seq\x12\x16\n" +
	"\x05error\x18\x02 \x01(\tH\x00R\x05error\x12(\n" +
	"\x04data\x18\x03 \x01(\v2\x12.net.TranscodeDataH\x00R\x04data\x12)\n" +
	"\x04info\x18\x10 \x01(\v2\x15.net.OrchestratorInfoR\x04infoB\b\n" +
	"\x06result\":\n" +
	"\rPaymentResult\x12)\n" +
	"\x04info\x18\x10 \x01(\v2\x15.net.OrchestratorInfoR\x04info\"|\n" +
	"\x0fRegisterRequest\x12\x16\n" +
	"\x06secret\x18\x01 \x01(\tR\x06secret\x12\x1a\n" +
	"\bcapacity\x18\x02 \x01(\x03R\bcapacity\x125\n" +
	"\fcapabilities\x18\x03 \x01(\v2\x11.net.CapabilitiesR\fcapabilities\"\xa1\x01\n" +
	"\rNotifySegment\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12&\n" +
	"\asegData\x18\x03 \x01(\v2\f.net.SegDataR\asegData\x12\x16\n" +
	"\x06taskId\x18\x10 \x01(\x03R\x06taskId\x12\x16\n" +
	"\x06orchId\x18\x12 \x01(\tR\x06orchId\x12\x1a\n" +
	"\bprofiles\x18\x11 \x01(\fR\bprofilesJ\x04\b\x02\x10\x03J\x04\b!\x10\"\"\x9e\x01\n" +
	"\x17RegisterAIWorkerRequest\x12\x16\n" +
	"\x06secret\x18\x01 \x01(\tR\x06secret\x125\n" +
	"\fcapabilities\x18\x02 \x01(\v2\x11.net.CapabilitiesR\fcapabilities\x124\n" +
	"\bhardware\x18\x03 \x03(\v2\x18.net.HardwareInformationR\bhardware\"I\n" +
	"\tAIJobData\x12\x1a\n" +
	"\bpipeline\x18\x01 \x01(\tR\bpipeline\x12 \n" +
	"\vrequestData\x18\x02 \x01(\fR\vrequestData\"S\n" +
	"\vNotifyAIJob\x12,\n" +
	"\tAIJobData\x18\x01 \x01(\v2\x0e.net.AIJobDataR\tAIJobData\x12\x16\n" +
	"\x06taskId\x18\x02 \x01(\x03R\x06taskId\"\x9f\x02\n" +
	"\fTicketParams\x12\x1c\n" +
	"\trecipient\x18\x01 \x01(\fR\trecipient\x12\x1d\n" +
	"\n" +
	"face_value\x18\x02 \x01(\fR\tfaceValue\x12\x19\n" +
	"\bwin_prob\x18\x03 \x01(\fR\awinProb\x12.\n" +
	"\x13recipient_rand_hash\x18\x04 \x01(\fR\x11recipientRandHash\x12\x12\n" +
	"\x04seed\x18\x05 \x01(\fR\x04seed\x12)\n" +
	"\x10expiration_block\x18\x06 \x01(\fR\x0fexpirationBlock\x12H\n" +
	"\x11expiration_params\x18\a \x01(\v2\x1b.net.TicketExpirationParamsR\x10expirationParams\"I\n" +
	"\x12TicketSenderParams\x12!\n" +
	"\fsender_nonce\x18\x01 \x01(\rR\vsenderNonce\x12\x10\n" +
	"\x03sig\x18\x02 \x01(\fR\x03sig\"z\n" +
	"\x16TicketExpirationParams\x12%\n" +
	"\x0ecreation_round\x18\x01 \x01(\x03R\rcreationRound\x129\n" +
	"\x19creation_round_block_hash\x18\x02 \x01(\fR\x16creationRoundBlockHash\"\xa5\x02\n" +
	"\aPayment\x126\n" +
	"\rticket_params\x18\x01 \x01(\v2\x11.net.TicketParamsR\fticketParams\x12\x16\n" +
	"\x06sender\x18\x02 \x01(\fR\x06sender\x12H\n" +
	"\x11expiration_params\x18\x03 \x01(\v2\x1b.net.TicketExpirationParamsR\x10expirationParams\x12I\n" +
	"\x14ticket_sender_params\x18\x04 \x03(\v2\x17.net.TicketSenderParamsR\x12ticketSenderParams\x125\n" +
	"\x0eexpected_price\x18\x05 \x01(\v2\x0e.net.PriceInfoR\rexpectedPrice\"\xa4\x01\n" +
	"\x0eGPUComputeInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05major\x18\x04 \x01(\rR\x05major\x12\x14\n" +
	"\x05minor\x18\x05 \x01(\rR\x05minor\x12\x1f\n" +
	"\vmemory_free\x18\x06 \x01(\x03R\n" +
	"memoryFree\x12!\n" +
	"\fmemory_total\x18\a \x01(\x03R\vmemoryTotal\"\xdf\x01\n" +
	"\x13HardwareInformation\x12\x1a\n" +
	"\bpipeline\x18\x01 \x01(\tR\bpipeline\x12\x19\n" +
	"\bmodel_id\x18\x02 \x01(\tR\amodelId\x12@\n" +
	"\bgpu_info\x18\x03 \x03(\v2%.net.HardwareInformation.GpuInfoEntryR\agpuInfo\x1aO\n" +
	"\fGpuInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.net.GPUComputeInfoR\x05value:\x028\x012\xd8\x01\n" +
	"\fOrchestrator\x12B\n" +
	"\x0fGetOrchestrator\x12\x18.net.OrchestratorRequest\x1a\x15.net.OrchestratorInfo\x12^\n" +
	"\x15EndTranscodingSession\x12!.net.EndTranscodingSessionRequest\x1a\".net.EndTranscodingSessionResponse\x12$\n" +
	"\x04Ping\x12\r.net.PingPong\x1a\r.net.PingPong2P\n" +
	"\bAIWorker\x12D\n" +
	"\x10RegisterAIWorker\x12\x1c.net.RegisterAIWorkerRequest\x1a\x10.net.NotifyAIJob0\x012N\n" +
	"\n" +
	"Transcoder\x12@\n" +
	"\x12RegisterTranscoder\x12\x14.net.RegisterRequest\x1a\x12.net.NotifySegment0\x01B\aZ\x05./netb\x06proto3"

var (
	file_net_lp_rpc_proto_rawDescOnce sync.Once
	file_net_lp_rpc_proto_rawDescData []byte
)

func file_net_lp_rpc_proto_rawDescGZIP() []byte {
	file_net_lp_rpc_proto_rawDescOnce.Do(func() {
		file_net_lp_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_net_lp_rpc_proto_rawDesc), len(file_net_lp_rpc_proto_rawDesc)))
	})
	return file_net_lp_rpc_proto_rawDescData
}

var file_net_lp_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_net_lp_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_net_lp_rpc_proto_goTypes = []any{
	(OSInfo_StorageType)(0),                    // 0: net.OSInfo.StorageType
	(VideoProfile_Format)(0),                   // 1: net.VideoProfile.Format
	(VideoProfile_Profile)(0),                  // 2: net.VideoProfile.Profile
	(VideoProfile_VideoCodec)(0),               // 3: net.VideoProfile.VideoCodec
	(VideoProfile_ChromaSubsampling)(0),        // 4: net.VideoProfile.ChromaSubsampling
	(*PingPong)(nil),                           // 5: net.PingPong
	(*EndTranscodingSessionRequest)(nil),       // 6: net.EndTranscodingSessionRequest
	(*EndTranscodingSessionResponse)(nil),      // 7: net.EndTranscodingSessionResponse
	(*OrchestratorRequest)(nil),                // 8: net.OrchestratorRequest
	(*OSInfo)(nil),                             // 9: net.OSInfo
	(*S3OSInfo)(nil),                           // 10: net.S3OSInfo
	(*PriceInfo)(nil),                          // 11: net.PriceInfo
	(*Capabilities)(nil),                       // 12: net.Capabilities
	(*OrchestratorInfo)(nil),                   // 13: net.OrchestratorInfo
	(*AuthToken)(nil),                          // 14: net.AuthToken
	(*SegData)(nil),                            // 15: net.SegData
	(*SegParameters)(nil),                      // 16: net.SegParameters
	(*VideoProfile)(nil),                       // 17: net.VideoProfile
	(*TranscodedSegmentData)(nil),              // 18: net.TranscodedSegmentData
	(*TranscodeData)(nil),                      // 19: net.TranscodeData
	(*TranscodeResult)(nil),                    // 20: net.TranscodeResult
	(*PaymentResult)(nil),                      // 21: net.PaymentResult
	(*RegisterRequest)(nil),                    // 22: net.RegisterRequest
	(*NotifySegment)(nil),                      // 23: net.NotifySegment
	(*RegisterAIWorkerRequest)(nil),            // 24: net.RegisterAIWorkerRequest
	(*AIJobData)(nil),                          // 25: net.AIJobData
	(*NotifyAIJob)(nil),                        // 26: net.NotifyAIJob
	(*TicketParams)(nil),                       // 27: net.TicketParams
	(*TicketSenderParams)(nil),                 // 28: net.TicketSenderParams
	(*TicketExpirationParams)(nil),             // 29: net.TicketExpirationParams
	(*Payment)(nil),                            // 30: net.Payment
	(*GPUComputeInfo)(nil),                     // 31: net.GPUComputeInfo
	(*HardwareInformation)(nil),                // 32: net.HardwareInformation
	nil,                                        // 33: net.Capabilities.CapacitiesEntry
	(*Capabilities_Constraints)(nil),           // 34: net.Capabilities.Constraints
	(*Capabilities_CapabilityConstraints)(nil), // 35: net.Capabilities.CapabilityConstraints
	nil, // 36: net.Capabilities.Constraints.PerCapabilityEntry
	(*Capabilities_CapabilityConstraints_ModelConstraint)(nil), // 37: net.Capabilities.CapabilityConstraints.ModelConstraint
	nil, // 38: net.Capabilities.CapabilityConstraints.ModelsEntry
	nil, // 39: net.HardwareInformation.GpuInfoEntry
}
var file_net_lp_rpc_proto_depIdxs = []int32{
	14, // 0: net.EndTranscodingSessionRequest.auth_token:type_name -> net.AuthToken
	12, // 1: net.OrchestratorRequest.capabilities:type_name -> net.Capabilities
	0,  // 2: net.OSInfo.storageType:type_name -> net.OSInfo.StorageType
	10, // 3: net.OSInfo.s3info:type_name -> net.S3OSInfo
	33, // 4: net.Capabilities.capacities:type_name -> net.Capabilities.CapacitiesEntry
	34, // 5: net.Capabilities.constraints:type_name -> net.Capabilities.Constraints
	27, // 6: net.OrchestratorInfo.ticket_params:type_name -> net.TicketParams
	11, // 7: net.OrchestratorInfo.price_info:type_name -> net.PriceInfo
	12, // 8: net.OrchestratorInfo.capabilities:type_name -> net.Capabilities
	14, // 9: net.OrchestratorInfo.auth_token:type_name -> net.AuthToken
	32, // 10: net.OrchestratorInfo.hardware:type_name -> net.HardwareInformation
	9,  // 11: net.OrchestratorInfo.storage:type_name -> net.OSInfo
	11, // 12: net.OrchestratorInfo.capabilities_prices:type_name -> net.PriceInfo
	12, // 13: net.SegData.capabilities:type_name -> net.Capabilities
	14, // 14: net.SegData.auth_token:type_name -> net.AuthToken
	9,  // 15: net.SegData.storage:type_name -> net.OSInfo
	17, // 16: net.SegData.fullProfiles:type_name -> net.VideoProfile
	17, // 17: net.SegData.fullProfiles2:type_name -> net.VideoProfile
	17, // 18: net.SegData.fullProfiles3:type_name -> net.VideoProfile
	16, // 19: net.SegData.segment_parameters:type_name -> net.SegParameters
	1,  // 20: net.VideoProfile.format:type_name -> net.VideoProfile.Format
	2,  // 21: net.VideoProfile.profile:type_name -> net.VideoProfile.Profile
	3,  // 22: net.VideoProfile.encoder:type_name -> net.VideoProfile.VideoCodec
	4,  // 23: net.VideoProfile.chromaFormat:type_name -> net.VideoProfile.ChromaSubsampling
	18, // 24: net.TranscodeData.segments:type_name -> net.TranscodedSegmentData
	19, // 25: net.TranscodeResult.data:type_name -> net.TranscodeData
	13, // 26: net.TranscodeResult.info:type_name -> net.OrchestratorInfo
	13, // 27: net.PaymentResult.info:type_name -> net.OrchestratorInfo
	12, // 28: net.RegisterRequest.capabilities:type_name -> net.Capabilities
	15, // 29: net.NotifySegment.segData:type_name -> net.SegData
	12, // 30: net.RegisterAIWorkerRequest.capabilities:type_name -> net.Capabilities
	32, // 31: net.RegisterAIWorkerRequest.hardware:type_name -> net.HardwareInformation
	25, // 32: net.NotifyAIJob.AIJobData:type_name -> net.AIJobData
	29, // 33: net.TicketParams.expiration_params:type_name -> net.TicketExpirationParams
	27, // 34: net.Payment.ticket_params:type_name -> net.TicketParams
	29, // 35: net.Payment.expiration_params:type_name -> net.TicketExpirationParams
	28, // 36: net.Payment.ticket_sender_params:type_name -> net.TicketSenderParams
	11, // 37: net.Payment.expected_price:type_name -> net.PriceInfo
	39, // 38: net.HardwareInformation.gpu_info:type_name -> net.HardwareInformation.GpuInfoEntry
	36, // 39: net.Capabilities.Constraints.PerCapability:type_name -> net.Capabilities.Constraints.PerCapabilityEntry
	38, // 40: net.Capabilities.CapabilityConstraints.models:type_name -> net.Capabilities.CapabilityConstraints.ModelsEntry
	35, // 41: net.Capabilities.Constraints.PerCapabilityEntry.value:type_name -> net.Capabilities.CapabilityConstraints
	37, // 42: net.Capabilities.CapabilityConstraints.ModelsEntry.value:type_name -> net.Capabilities.CapabilityConstraints.ModelConstraint
	31, // 43: net.HardwareInformation.GpuInfoEntry.value:type_name -> net.GPUComputeInfo
	8,  // 44: net.Orchestrator.GetOrchestrator:input_type -> net.OrchestratorRequest
	6,  // 45: net.Orchestrator.EndTranscodingSession:input_type -> net.EndTranscodingSessionRequest
	5,  // 46: net.Orchestrator.Ping:input_type -> net.PingPong
	24, // 47: net.AIWorker.RegisterAIWorker:input_type -> net.RegisterAIWorkerRequest
	22, // 48: net.Transcoder.RegisterTranscoder:input_type -> net.RegisterRequest
	13, // 49: net.Orchestrator.GetOrchestrator:output_type -> net.OrchestratorInfo
	7,  // 50: net.Orchestrator.EndTranscodingSession:output_type -> net.EndTranscodingSessionResponse
	5,  // 51: net.Orchestrator.Ping:output_type -> net.PingPong
	26, // 52: net.AIWorker.RegisterAIWorker:output_type -> net.NotifyAIJob
	23, // 53: net.Transcoder.RegisterTranscoder:output_type -> net.NotifySegment
	49, // [49:54] is the sub-list for method output_type
	44, // [44:49] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_net_lp_rpc_proto_init() }
func file_net_lp_rpc_proto_init() {
	if File_net_lp_rpc_proto != nil {
		return
	}
	file_net_lp_rpc_proto_msgTypes[15].OneofWrappers = []any{
		(*TranscodeResult_Error)(nil),
		(*TranscodeResult_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_net_lp_rpc_proto_rawDesc), len(file_net_lp_rpc_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_net_lp_rpc_proto_goTypes,
		DependencyIndexes: file_net_lp_rpc_proto_depIdxs,
		EnumInfos:         file_net_lp_rpc_proto_enumTypes,
		MessageInfos:      file_net_lp_rpc_proto_msgTypes,
	}.Build()
	File_net_lp_rpc_proto = out.File
	file_net_lp_rpc_proto_goTypes = nil
	file_net_lp_rpc_proto_depIdxs = nil
}
