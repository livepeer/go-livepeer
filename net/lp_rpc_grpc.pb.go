// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: net/lp_rpc.proto

package net

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Orchestrator_GetOrchestrator_FullMethodName       = "/net.Orchestrator/GetOrchestrator"
	Orchestrator_EndTranscodingSession_FullMethodName = "/net.Orchestrator/EndTranscodingSession"
	Orchestrator_Ping_FullMethodName                  = "/net.Orchestrator/Ping"
)

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RPC calls implemented by the orchestrator
type OrchestratorClient interface {
	// Called by the broadcaster to request transcoder info from an orchestrator.
	GetOrchestrator(ctx context.Context, in *OrchestratorRequest, opts ...grpc.CallOption) (*OrchestratorInfo, error)
	EndTranscodingSession(ctx context.Context, in *EndTranscodingSessionRequest, opts ...grpc.CallOption) (*EndTranscodingSessionResponse, error)
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) GetOrchestrator(ctx context.Context, in *OrchestratorRequest, opts ...grpc.CallOption) (*OrchestratorInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrchestratorInfo)
	err := c.cc.Invoke(ctx, Orchestrator_GetOrchestrator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) EndTranscodingSession(ctx context.Context, in *EndTranscodingSessionRequest, opts ...grpc.CallOption) (*EndTranscodingSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndTranscodingSessionResponse)
	err := c.cc.Invoke(ctx, Orchestrator_EndTranscodingSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingPong)
	err := c.cc.Invoke(ctx, Orchestrator_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServer is the server API for Orchestrator service.
// All implementations must embed UnimplementedOrchestratorServer
// for forward compatibility.
//
// RPC calls implemented by the orchestrator
type OrchestratorServer interface {
	// Called by the broadcaster to request transcoder info from an orchestrator.
	GetOrchestrator(context.Context, *OrchestratorRequest) (*OrchestratorInfo, error)
	EndTranscodingSession(context.Context, *EndTranscodingSessionRequest) (*EndTranscodingSessionResponse, error)
	Ping(context.Context, *PingPong) (*PingPong, error)
	mustEmbedUnimplementedOrchestratorServer()
}

// UnimplementedOrchestratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServer struct{}

func (UnimplementedOrchestratorServer) GetOrchestrator(context.Context, *OrchestratorRequest) (*OrchestratorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrchestrator not implemented")
}
func (UnimplementedOrchestratorServer) EndTranscodingSession(context.Context, *EndTranscodingSessionRequest) (*EndTranscodingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTranscodingSession not implemented")
}
func (UnimplementedOrchestratorServer) Ping(context.Context, *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {}
func (UnimplementedOrchestratorServer) testEmbeddedByValue()                      {}

// UnsafeOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServer will
// result in compilation errors.
type UnsafeOrchestratorServer interface {
	mustEmbedUnimplementedOrchestratorServer()
}

func RegisterOrchestratorServer(s grpc.ServiceRegistrar, srv OrchestratorServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Orchestrator_ServiceDesc, srv)
}

func _Orchestrator_GetOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchestratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_GetOrchestrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetOrchestrator(ctx, req.(*OrchestratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_EndTranscodingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTranscodingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).EndTranscodingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_EndTranscodingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).EndTranscodingSession(ctx, req.(*EndTranscodingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

// Orchestrator_ServiceDesc is the grpc.ServiceDesc for Orchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "net.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrchestrator",
			Handler:    _Orchestrator_GetOrchestrator_Handler,
		},
		{
			MethodName: "EndTranscodingSession",
			Handler:    _Orchestrator_EndTranscodingSession_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Orchestrator_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "net/lp_rpc.proto",
}

const (
	AIWorker_RegisterAIWorker_FullMethodName = "/net.AIWorker/RegisterAIWorker"
)

// AIWorkerClient is the client API for AIWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIWorkerClient interface {
	// Called by the aiworker to register to an orchestrator. The orchestrator
	// notifies registered aiworkers of jobs as they come in.
	RegisterAIWorker(ctx context.Context, in *RegisterAIWorkerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotifyAIJob], error)
}

type aIWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewAIWorkerClient(cc grpc.ClientConnInterface) AIWorkerClient {
	return &aIWorkerClient{cc}
}

func (c *aIWorkerClient) RegisterAIWorker(ctx context.Context, in *RegisterAIWorkerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotifyAIJob], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIWorker_ServiceDesc.Streams[0], AIWorker_RegisterAIWorker_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterAIWorkerRequest, NotifyAIJob]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIWorker_RegisterAIWorkerClient = grpc.ServerStreamingClient[NotifyAIJob]

// AIWorkerServer is the server API for AIWorker service.
// All implementations must embed UnimplementedAIWorkerServer
// for forward compatibility.
type AIWorkerServer interface {
	// Called by the aiworker to register to an orchestrator. The orchestrator
	// notifies registered aiworkers of jobs as they come in.
	RegisterAIWorker(*RegisterAIWorkerRequest, grpc.ServerStreamingServer[NotifyAIJob]) error
	mustEmbedUnimplementedAIWorkerServer()
}

// UnimplementedAIWorkerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIWorkerServer struct{}

func (UnimplementedAIWorkerServer) RegisterAIWorker(*RegisterAIWorkerRequest, grpc.ServerStreamingServer[NotifyAIJob]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterAIWorker not implemented")
}
func (UnimplementedAIWorkerServer) mustEmbedUnimplementedAIWorkerServer() {}
func (UnimplementedAIWorkerServer) testEmbeddedByValue()                  {}

// UnsafeAIWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIWorkerServer will
// result in compilation errors.
type UnsafeAIWorkerServer interface {
	mustEmbedUnimplementedAIWorkerServer()
}

func RegisterAIWorkerServer(s grpc.ServiceRegistrar, srv AIWorkerServer) {
	// If the following call pancis, it indicates UnimplementedAIWorkerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIWorker_ServiceDesc, srv)
}

func _AIWorker_RegisterAIWorker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterAIWorkerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIWorkerServer).RegisterAIWorker(m, &grpc.GenericServerStream[RegisterAIWorkerRequest, NotifyAIJob]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIWorker_RegisterAIWorkerServer = grpc.ServerStreamingServer[NotifyAIJob]

// AIWorker_ServiceDesc is the grpc.ServiceDesc for AIWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "net.AIWorker",
	HandlerType: (*AIWorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterAIWorker",
			Handler:       _AIWorker_RegisterAIWorker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "net/lp_rpc.proto",
}

const (
	Transcoder_RegisterTranscoder_FullMethodName = "/net.Transcoder/RegisterTranscoder"
)

// TranscoderClient is the client API for Transcoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranscoderClient interface {
	// Called by the transcoder to register to an orchestrator. The orchestrator
	// notifies registered transcoders of segments as they come in.
	RegisterTranscoder(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotifySegment], error)
}

type transcoderClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscoderClient(cc grpc.ClientConnInterface) TranscoderClient {
	return &transcoderClient{cc}
}

func (c *transcoderClient) RegisterTranscoder(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotifySegment], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transcoder_ServiceDesc.Streams[0], Transcoder_RegisterTranscoder_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterRequest, NotifySegment]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transcoder_RegisterTranscoderClient = grpc.ServerStreamingClient[NotifySegment]

// TranscoderServer is the server API for Transcoder service.
// All implementations must embed UnimplementedTranscoderServer
// for forward compatibility.
type TranscoderServer interface {
	// Called by the transcoder to register to an orchestrator. The orchestrator
	// notifies registered transcoders of segments as they come in.
	RegisterTranscoder(*RegisterRequest, grpc.ServerStreamingServer[NotifySegment]) error
	mustEmbedUnimplementedTranscoderServer()
}

// UnimplementedTranscoderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTranscoderServer struct{}

func (UnimplementedTranscoderServer) RegisterTranscoder(*RegisterRequest, grpc.ServerStreamingServer[NotifySegment]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterTranscoder not implemented")
}
func (UnimplementedTranscoderServer) mustEmbedUnimplementedTranscoderServer() {}
func (UnimplementedTranscoderServer) testEmbeddedByValue()                    {}

// UnsafeTranscoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscoderServer will
// result in compilation errors.
type UnsafeTranscoderServer interface {
	mustEmbedUnimplementedTranscoderServer()
}

func RegisterTranscoderServer(s grpc.ServiceRegistrar, srv TranscoderServer) {
	// If the following call pancis, it indicates UnimplementedTranscoderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transcoder_ServiceDesc, srv)
}

func _Transcoder_RegisterTranscoder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TranscoderServer).RegisterTranscoder(m, &grpc.GenericServerStream[RegisterRequest, NotifySegment]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transcoder_RegisterTranscoderServer = grpc.ServerStreamingServer[NotifySegment]

// Transcoder_ServiceDesc is the grpc.ServiceDesc for Transcoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transcoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "net.Transcoder",
	HandlerType: (*TranscoderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterTranscoder",
			Handler:       _Transcoder_RegisterTranscoder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "net/lp_rpc.proto",
}
